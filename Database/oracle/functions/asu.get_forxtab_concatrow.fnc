DROP FUNCTION ASU.GET_FORXTAB_CONCATROW
/

--
-- GET_FORXTAB_CONCATROW  (Function) 
--
--  Dependencies: 
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--   DBMS_SQL (Synonym)
--
CREATE OR REPLACE FUNCTION ASU.GET_FORXTAB_CONCATROW(A_ROWNUM IN NUMBER, A_TABLEPATH IN VARCHAR2) RETURN VARCHAR2 IS

  L_CUR1                    INTEGER;
  L_CUR1STAT                INTEGER;
  I                         INTEGER;
  L_COLCOUNT                INTEGER;
  L_COLVALUE_CHR            VARCHAR2(4000);
  L_DESCTBL                 DBMS_SQL.DESC_TAB;
  RESULT                    VARCHAR2(4000);

BEGIN
  L_CUR1 := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(C =>                 L_CUR1,
                   STATEMENT =>         'SELECT * FROM (SELECT ROWNUM R, T.* FROM '||A_TABLEPATH||
                                        ' T ) WHERE R = '||A_ROWNUM,
                   LANGUAGE_FLAG =>     DBMS_SQL.NATIVE
                   );
  DBMS_SQL.DESCRIBE_COLUMNS(L_CUR1,L_COLCOUNT,L_DESCTBL);

  FOR I IN 1 .. L_COLCOUNT
  LOOP
    DBMS_SQL.DEFINE_COLUMN(L_CUR1,I,L_COLVALUE_CHR,4000);
  END LOOP;
  L_CUR1STAT := DBMS_SQL.EXECUTE(L_CUR1);
  IF DBMS_SQL.FETCH_ROWS(L_CUR1) > 0
  THEN
     FOR I IN 2..L_COLCOUNT - 4  -- 4 ÏÎÑËÅÄÍÈÕ ÏÎËß(FC_TYPE,FN_ORDER,FK_MKB10 È FL_REQUIRED) ÍÅ ÒÐÎÃÀÒÜ
     LOOP
       DBMS_SQL.COLUMN_VALUE(L_CUR1,I,L_COLVALUE_CHR);
       IF LENGTH(L_COLVALUE_CHR) > 0
       THEN
         RESULT := RESULT||''|| L_COLVALUE_CHR;
       END IF;
     END LOOP;
  END IF;
  DBMS_SQL.CLOSE_CURSOR(L_CUR1);
  RETURN(LTRIM(RESULT));

EXCEPTION
WHEN OTHERS THEN
  BEGIN
    IF DBMS_SQL.IS_OPEN(L_CUR1) THEN
      DBMS_SQL.CLOSE_CURSOR(L_CUR1);
    END IF;
  END;
END GET_FORXTAB_CONCATROW;
/

SHOW ERRORS;


