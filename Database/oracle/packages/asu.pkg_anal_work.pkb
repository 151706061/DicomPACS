DROP PACKAGE BODY ASU.PKG_ANAL_WORK
/

--
-- PKG_ANAL_WORK  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ASU."PKG_ANAL_WORK" IS
  PROCEDURE SET_FIRST(pFK_NAZID IN NUMBER,pFK_SMID IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c(pNAZID NUMBER,pSMID NUMBER) IS SELECT FL_PATFIRST FROM TRESAN WHERE FK_NAZID=pNAZID AND FK_SMID=pSMID;
  lFirst NUMBER;
  BEGIN
    OPEN c(pFK_NAZID,pFK_SMID);
    FETCH c INTO lFirst;
    CLOSE c;
    if lFirst=1 then
      UPDATE TRESAN SET FL_PATFIRST=0 WHERE FK_NAZID=pFK_NAZID AND FK_SMID=pFK_SMID;
    else
      UPDATE TRESAN SET FL_PATFIRST=1 WHERE FK_NAZID=pFK_NAZID AND FK_SMID=pFK_SMID;
    end if;
    COMMIT;
  END;
  FUNCTION GET_PATALOGYVID(pFK_NAZID IN NUMBER) RETURN NUMBER IS
  CURSOR c(pNAZID NUMBER) IS SELECT FK_PATID FROM TRESAN,(SELECT MIN(FP_PRIOR) FP_MPRIOR FROM TPATNAME WHERE FP_PRIOR>0) WHERE FK_NAZID=pNAZID and GET_PATALOGY_LEVEL(FK_PATID)>=FP_MPRIOR AND FL_ZAKL<>1;
  i NUMBER;
  BEGIN
    OPEN c(pFK_NAZID);
    FETCH c INTO i;
    CLOSE c;
    RETURN i;
  END;
  PROCEDURE DELETE_ANAL (pFK_NAZID IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    DELETE FROM TEXPAN WHERE FK_NAZID=pFK_NAZID;
    DELETE FROM TNAZAN WHERE FK_ID=pFK_NAZID;
    COMMIT;
  END;
  PROCEDURE DELETE_EXP_ANAL (pFK_NAZID IN NUMBER,pFK_SMID IN NUMBER) IS
--  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c(pID NUMBER) IS SELECT COUNT(FK_ID) FROM TEXPAN WHERE FK_NAZID=pID;
  n NUMBER;
  BEGIN
    DELETE FROM TEXPAN WHERE FK_NAZID=pFK_NAZID AND FK_SMID=pFK_SMID;
    OPEN c(pFK_NAZID);
    FETCH c INTO n;
    CLOSE c;
    IF n=0 THEN
      DELETE FROM TNAZAN WHERE FK_ID=pFK_NAZID;
    END IF;
--    COMMIT;
  END;
  FUNCTION DO_NAZ(pFK_SMID IN NUMBER,pFK_VRACHID IN NUMBER,pFK_PACID IN NUMBER,pFD_DATE IN DATE,bExp BOOLEAN default FALSE, pFK_NAZOWNER NUMBER DEFAULT -1) RETURN NUMBER IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  n NUMBER;
  pfk_ispolid number;
  pfk_kabinetid number;
  cursor cispol
  is
  select fk_sotrid,fk_kabinetid from tnazvrach
  where fk_smid=pfk_smid;
  BEGIN
  open cispol;
  fetch cispol into pfk_ispolid,pfk_kabinetid;
  close cispol;
    INSERT INTO TNAZAN(FK_SMID,FD_NAZ,fk_ispolid,fk_roomid,FD_RUN,FK_VRACHID,FK_NAZSOSID,FK_PACID, FK_NAZOWNER) VALUES
                (pFK_SMID,pFD_DATE,pfk_ispolid,pfk_kabinetid,pFD_DATE,pFK_VRACHID,2,pFK_PACID, pFK_NAZOWNER) RETURNING FK_ID INTO n;
    IF bExp=FALSE then
      INSERT INTO TEXPAN (FK_NAZID,FK_SMID) 
          select n,FK_ID 
           from tsmid
            WHERE FL_SHOWANAL IN (3,4) 
           start with fk_owner=pFK_SMID 
           connect by prior fk_id = fk_owner;
    END IF;
    COMMIT;
    RETURN n;
  END;
  FUNCTION DO_EXP_NAZ(pFK_NAZID IN NUMBER,pFK_SMID IN NUMBER,pFK_VRACHID IN NUMBER,pFK_PACID IN NUMBER,pFD_DATE IN DATE) RETURN NUMBER IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c(pID NUMBER) IS SELECT FK_ID FROM TNAZAN WHERE FK_ID=pID;
  n NUMBER;
  BEGIN
    OPEN c(pFK_NAZID);
    FETCH c INTO n;
    IF c%NOTFOUND THEN
      n:=DO_NAZ(GET_OWNER_FROM_SMID(pFK_SMID),pFK_VRACHID,pFK_PACID,pFD_DATE,TRUE);
    END IF;
    CLOSE c;
    INSERT INTO TEXPAN(FK_SMID,FK_NAZID) VALUES (pFK_SMID,n);
    COMMIT;
    RETURN n;
  END;
  PROCEDURE DELETE_REGIST(pFK_NAZID IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    DELETE FROM TLABREG WHERE FK_NAZID=pFK_NAZID;
    COMMIT;
  END;


  PROCEDURE CHANGE_PROBE(pFK_PACID IN NUMBER,pFK_NAZID IN NUMBER,pFN_PROBE IN NUMBER,pFD_DATE IN DATE) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c(nPacID NUMBER,nProbe NUMBER,pDate DATE,pSMID NUMBER) IS
        SELECT
            COUNT(TLABREG.FK_ID)
        FROM
            TLABREG,
            TNAZAN
        WHERE
            TLABREG.FK_PACID<>nPacID
            AND TLABREG.FN_PROBE=nProbe
            AND TLABREG.FD_REGIST<=pDate
            AND GET_LAB_RAZD(GET_SMIDFROMNAZ(TLABREG.FK_NAZID))=pSMID

            AND TNAZAN.fk_id=TLABREG.fk_nazid
            AND TNAZAN.FK_NAZSOSID=4;

  CURSOR c1(nPacID NUMBER,nProbe NUMBER,pDate DATE) IS
        SELECT
            COUNT(TLABREG.FK_ID)
        FROM
            TLABREG,
            TNAZAN
        WHERE
            TLABREG.FK_PACID<>nPacID
            AND TLABREG.FN_PROBE=nProbe
            AND TLABREG.FD_REGIST<=pDate
            AND GET_DEFAULT_FROM_SMID(GET_LAB_RAZD(GET_SMIDFROMNAZ(TLABREG.FK_NAZID)))=0

            AND TNAZAN.fk_id=TLABREG.fk_nazid
            AND TNAZAN.FK_NAZSOSID=4;

  i NUMBER;
  BEGIN
    IF GET_DEFAULT_FROM_SMID(GET_LAB_RAZD(GET_SMIDFROMNAZ(pFK_NAZID)))=1 THEN
      OPEN c(pFK_PACID,pFN_PROBE,pFD_DATE,GET_LAB_RAZD(GET_SMIDFROMNAZ(pFK_NAZID)));
      FETCH c INTO i;
      CLOSE c;
      if i>0 then
        RAISE_APPLICATION_ERROR(-20002,'Данная проба уже существует');
        RETURN;
      end if;
      i:=GET_LAB_RAZD(GET_SMIDFROMNAZ(pFK_NAZID));
      UPDATE TLABREG SET FN_PROBE=pFN_PROBE WHERE FK_PACID=pFK_PACID AND FD_REGIST<=pFD_DATE
                                                                       AND GET_LAB_RAZD(GET_SMIDFROMNAZ(FK_NAZID))=i;
    ELSE
      OPEN c1(pFK_PACID,pFN_PROBE,pFD_DATE);
      FETCH c1 INTO i;
      CLOSE c1;
      if i>0 then
        RAISE_APPLICATION_ERROR(-20002,'Данная проба уже существует');
        RETURN;
      end if;
      UPDATE TLABREG SET FN_PROBE=pFN_PROBE WHERE FK_PACID=pFK_PACID AND FD_REGIST<=pFD_DATE
                                                                       AND GET_DEFAULT_FROM_SMID(GET_LAB_RAZD(GET_SMIDFROMNAZ(FK_NAZID)))=0;
    END IF;
    COMMIT;
  END;


  PROCEDURE DO_WRITE_ZABOR(pFD_DATE IN DATE,pFN_PALEC IN NUMBER,pFN_VENA IN NUMBER)IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    DELETE FROM TZABOR WHERE FD_DATE=pFD_DATE;
    INSERT INTO TZABOR (FD_DATE,FN_VENA,FN_PALEC) VALUES(pFD_DATE,pFN_VENA,pFN_PALEC);
    COMMIT;
  END;
  PROCEDURE DO_DELETE_ZABOR(pFD_DATE IN DATE) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    DELETE FROM TZABOR WHERE FD_DATE=pFD_DATE;
    COMMIT;
  END;


  PROCEDURE INDEX_PROBE IS
  CURSOR c IS
    SELECT
        FN_PROBE
    FROM TLABREG,
         TNAZAN
    WHERE
        TLABREG.fk_nazid = TNAZAN.fk_id
        AND TNAZAN.fk_nazsosid = 4
    GROUP BY FN_PROBE;
  i NUMBER;
  BEGIN
    i:=1;
    FOR pr IN c
    LOOP
        UPDATE TLABREG SET FN_PROBE=i WHERE FN_PROBE=pr.FN_PROBE;
        i := i + 1;
    END LOOP;
  END;

END; -- Package Body PKG_ANAL_WORK
/

SHOW ERRORS;


