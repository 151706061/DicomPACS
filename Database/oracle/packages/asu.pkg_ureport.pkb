DROP PACKAGE BODY ASU.PKG_UREPORT
/

--
-- PKG_UREPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ASU."PKG_UREPORT" 
IS
--
-- Purpose: Implements work for Universal Report
--
-- By Philip A. Milovanov
--create 20 august 2001
FUNCTION DO_EDIT_ALGO(pFK_CELLID IN NUMBER,pFK_FUNCID IN NUMBER,pFC_SIGN IN VARCHAR2,pFP_SEX IN NUMBER,
                       pFN_AGE1 IN NUMBER,pFN_AGE2 IN NUMBER,pFL_AMB IN NUMBER,pFN_COL IN NUMBER,pFN_ROW IN NUMBER,pFN_VALUE IN NUMBER) RETURN NUMBER IS
CURSOR c IS SELECT MAX(FN_ORDER)+1 FROM TURALGO WHERE FK_CELLID=pFK_CELLID;
pFN_ORDER NUMBER;
BEGIN
  OPEN c;
  FETCH c INTO pFN_ORDER;
  CLOSE c;
  IF pFN_ORDER IS NULL THEN
    pFN_ORDER:=1;
  END IF;
  INSERT INTO TURALGO (FK_CELLID,FN_ORDER,FK_FUNCID,FC_SIGN,FP_SEX,FN_AGE1,FN_AGE2,FL_AMB,FN_COL,FN_ROW,FN_VALUE)
               VALUES (pFK_CELLID,pFN_ORDER,pFK_FUNCID,pFC_SIGN,pFP_SEX,pFN_AGE1,pFN_AGE2,pFL_AMB,pFN_COL,pFN_ROW,pFN_VALUE) RETURNING FK_ID INTO pFN_ORDER;
  RETURN pFN_ORDER;
END;
PROCEDURE DO_DELETE_ALGO(pFK_ID IN NUMBER) IS
BEGIN
  DELETE FROM TURALGO WHERE FK_ID=pFK_ID;
END;
PROCEDURE DO_DELETE_ALGO_SMID(pFK_ALGOID IN NUMBER) IS
BEGIN
  DELETE FROM TURALGOSMID WHERE FK_ALGOID=pFK_ALGOID;
END;
PROCEDURE DO_WRITE_ALGO_SMID(pFK_ALGOID IN NUMBER,pFT_SMIDS IN TPLNUMBERS) IS
PRAGMA AUTONOMOUS_TRANSACTION;
i NUMBER;
BEGIN
  FOR i IN 1..pFT_SMIDS.COUNT LOOP
    INSERT INTO TURALGOSMID(FK_ALGOID,FK_SMID) VALUES(pFK_ALGOID,pFT_SMIDS(i));
  END LOOP;
  COMMIT;
END;
PROCEDURE DO_DELETE_FUNCTION(pFK_ID IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM TURFUNCS WHERE FK_ID=pFK_ID;
  COMMIT;
END;
FUNCTION DO_WRITE_FUNCTION(pFK_ID IN NUMBER,pFC_SHOW IN VARCHAR2,pFC_NAME IN VARCHAR2) RETURN NUMBER IS
PRAGMA AUTONOMOUS_TRANSACTION;
CURSOR c IS SELECT FK_ID FROM TURFUNCS WHERE FK_ID=pFK_ID;
i NUMBER;
BEGIN
  OPEN c;
  FETCH c INTO i;
  IF c%NOTFOUND THEN
    INSERT INTO TURFUNCS (FC_SHOW,FC_NAME) VALUES (pFC_SHOW,pFC_NAME) RETURNING FK_ID INTO i;
  ELSE
    UPDATE TURFUNCS SET FC_SHOW=pFC_SHOW,FC_NAME=pFC_NAME WHERE FK_ID=pFK_ID;
  END IF;
  CLOSE c;
  COMMIT;
  RETURN i;
END;
PROCEDURE DO_DELETE_FUNCTION_PARAMS(pFK_FUNCID IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM TURFUNCSPARAMS WHERE FK_FUNCID=pFK_FUNCID;
  COMMIT;
END;
PROCEDURE DO_WRITE_FUNCTION_PARAMS(pFK_FUNCID IN NUMBER,pFP_PARAM IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT INTO TURFUNCSPARAMS (FK_FUNCID,FP_PARAM) VALUES (pFK_FUNCID,pFP_PARAM);
  COMMIT;
END;
FUNCTION DO_EDIT_REPORT(pFK_ID IN NUMBER,pFC_NAME IN VARCHAR2,pFK_TYPE IN NUMBER,pFK_PERIOD IN NUMBER,pFL_SETKA IN NUMBER,pFL_NULS IN NUMBER,
                       pFK_DIVIDE IN NUMBER,pFL_OUT IN NUMBER,pFK_BEFORETEXT IN NUMBER,pFK_AFTERTEXT IN NUMBER) RETURN NUMBER IS
PRAGMA AUTONOMOUS_TRANSACTION;
CURSOR c IS SELECT FK_ID FROM TUREPORTS WHERE FK_ID=pFK_ID;
i NUMBER;
BEGIN
  OPEN c;
  FETCH c INTO i;
  IF c%NOTFOUND THEN
    INSERT INTO TUREPORTS(FC_NAME,FK_TYPE,FK_PERIOD,FL_SETKA,FL_NULS,FK_DIVIDE,FL_OUT,FK_BEFORETEXT,FK_AFTERTEXT)
                  VALUES (pFC_NAME,pFK_TYPE,pFK_PERIOD,pFL_SETKA,pFL_NULS,pFK_DIVIDE,pFL_OUT,pFK_BEFORETEXT,pFK_AFTERTEXT) RETURNING FK_ID INTO i;
  ELSE
    UPDATE TUREPORTS SET FC_NAME=pFC_NAME,FK_TYPE=pFK_TYPE,FK_PERIOD=pFK_PERIOD,FL_SETKA=pFL_SETKA,
                         FL_NULS=pFL_NULS,FK_DIVIDE=pFK_DIVIDE,FL_OUT=pFL_OUT,
                         FK_BEFORETEXT=pFK_BEFORETEXT,FK_AFTERTEXT=pFK_AFTERTEXT
                     WHERE FK_ID=pFK_ID;
  END IF;
  CLOSE c;
  COMMIT;
  RETURN i;
END;
PROCEDURE DO_DELETE_REPORT(pFK_ID IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM TUREPORTS WHERE FK_ID=pFK_ID;
  COMMIT;
END;
PROCEDURE DO_ADD_COL(pFK_REPORTID IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
CURSOR cRows IS SELECT DISTINCT FN_ROW FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID;
CURSOR cMaxCol IS SELECT MAX(FN_COL)+1 FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID;
i NUMBER:=0;
BEGIN
  OPEN cMaxCol;
  FETCH cMaxCol INTO i;
  CLOSE cMaxCol;
  IF i IS NULL THEN
    i:=0;
  END IF;
  FOR p IN cRows LOOP
    INSERT INTO TURCELLS (FK_REPORTID,FN_ROW,FN_COL) VALUES (pFK_REPORTID,p.FN_ROW,i);
  END LOOP;
  COMMIT;
END;
PROCEDURE DO_ADD_ROW(pFK_REPORTID IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
CURSOR cCols IS SELECT DISTINCT FN_COL FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID;
CURSOR cMaxROW IS SELECT MAX(FN_ROW)+1 FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID;
i NUMBER:=0;
BEGIN
  OPEN cMaxROW;
  FETCH cMaxROW INTO i;
  CLOSE cMaxROW;
  IF i IS NULL THEN
    i:=0;
  END IF;
  FOR p IN cCols LOOP
    INSERT INTO TURCELLS (FK_REPORTID,FN_ROW,FN_COL) VALUES (pFK_REPORTID,i,p.FN_COL);
  END LOOP;
  COMMIT;
END;
PROCEDURE DO_DELETE_COL(pFK_REPORTID IN NUMBER,pFN_COL IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID AND FN_COL=pFN_COL;
  COMMIT;
  DO_REARRANGE_COLS(pFK_REPORTID,0,0);
END;
PROCEDURE DO_DELETE_ROW(pFK_REPORTID IN NUMBER,pFN_ROW IN NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM TURCELLS WHERE FK_REPORTID=pFK_REPORTID AND FN_ROW=pFN_ROW;
  COMMIT;
  DO_REARRANGE_ROWS(pFK_REPORTID,0,0);
END;
PROCEDURE DO_EDIT_CELL(pFK_ID IN NUMBER,pFC_NAME IN VARCHAR2,pFC_FUNC IN VARCHAR2) IS
BEGIN
  UPDATE TURCELLS SET FC_NAME=pFC_NAME,FC_FUNC=pFC_FUNC WHERE FK_ID=pFK_ID;
END;
PROCEDURE DO_REARRANGE_COLS (pFK_REPORTID IN NUMBER, pFN_REQNUM IN NUMBER, pFL_RESERVE IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c IS
    SELECT DISTINCT FN_COL
      FROM TURCELLS
     WHERE FK_REPORTID = pFK_REPORTID
     ORDER BY FN_COL;
  i NUMBER;
BEGIN
  IF pFL_RESERVE = 1 THEN
    UPDATE TURCELLS
       SET FN_COL = FN_COL + 1
     WHERE FN_COL >= pFN_REQNUM
       AND FK_REPORTID = pFK_REPORTID;
  ELSE
    FOR p IN c LOOP
      i  := c%ROWCOUNT;
      UPDATE TURCELLS
         SET FN_COL = i-1
       WHERE FN_COL = p.FN_COL AND FK_REPORTID=pFK_REPORTID;
    END LOOP;
  END IF;
  COMMIT;
END;
PROCEDURE DO_SET_COL_NUM (pFK_REPORTID IN NUMBER,pFN_COL IN NUMBER, pFN_REQNUM IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  UPDATE TURCELLS
     SET FN_COL = pFN_REQNUM
   WHERE FN_COL = pFN_COL;
  COMMIT;
END;
PROCEDURE DO_REARRANGE_ROWS (pFK_REPORTID IN NUMBER, pFN_REQNUM IN NUMBER, pFL_RESERVE IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR c IS
    SELECT DISTINCT FN_ROW
      FROM TURCELLS
     WHERE FK_REPORTID = pFK_REPORTID
     ORDER BY FN_ROW;
  i NUMBER;
BEGIN
  IF pFL_RESERVE = 1 THEN
    UPDATE TURCELLS
       SET FN_ROW = FN_ROW + 1
     WHERE FN_ROW >= pFN_REQNUM
       AND FK_REPORTID = pFK_REPORTID;
  ELSE
    FOR p IN c LOOP
      i  := c%ROWCOUNT;
      UPDATE TURCELLS
         SET FN_ROW = i-1
       WHERE FN_ROW = p.FN_ROW AND FK_REPORTID=pFK_REPORTID;
    END LOOP;
  END IF;
  COMMIT;
END;
PROCEDURE DO_SET_ROW_NUM (pFK_REPORTID IN NUMBER,pFN_ROW IN NUMBER, pFN_REQNUM IN NUMBER) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  UPDATE TURCELLS
     SET FN_ROW = pFN_REQNUM
   WHERE FN_ROW = pFN_ROW;
  COMMIT;
END;
END; -- Package Body PKG_UREPORT
/

SHOW ERRORS;


