DROP PROCEDURE ASU.BUH_DO_WRITE_SROK
/

--
-- BUH_DO_WRITE_SROK  (Procedure) 
--
--  Dependencies: 
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--   TSROKY (Table)
--
CREATE OR REPLACE PROCEDURE ASU."BUH_DO_WRITE_SROK" ( pFK_ID IN NUMBER,pFK_PACID IN NUMBER,pFD_DATA1 IN DATE,pFD_DATA2 IN DATE,pFD_DATA3 IN DATE,
   pFN_KOL IN NUMBER,pFK_PRYB IN NUMBER,pFK_VYB IN NUMBER,pFC_DOCUMENT IN varchar,pFN_SUM in number)
   IS
   CURSOR cTemp IS SELECT /*+first_row*/COUNT(FK_ID) FROM TSROKY WHERE FK_ID=pFK_ID;
   nTemp NUMBER;
   nTemp1 NUMBER;
BEGIN
  OPEN cTemp;
  FETCH cTemp INTO nTemp;
  CLOSE cTemp;
 if nTemp=0 then
    INSERT INTO TSROKY(FK_ID,FK_PACID,FD_DATA1,FD_DATA2,FD_DATA3,FN_KOL,FK_PRYB,FK_VYB,fc_document,fn_sum)
      VALUES(pFK_ID,pFK_PACID,pFD_DATA1,pFD_DATA2,pFD_DATA3,pFN_KOL,pFK_PRYB,pFK_VYB,pfc_document,pFN_SUM) RETURNING FK_ID INTO nTemp1;
  else
--   raise_application_error(-20001,pFD_DATA1);
    UPDATE TSROKY SET
      FD_DATA1=pFD_DATA1,
      FD_DATA2=pFD_DATA2,
      FD_DATA3=pFD_DATA3,
      FN_KOL=pFN_KOL,
      FK_PRYB=pFK_PRYB,
      FK_VYB=pFK_VYB,
      fc_document=pfc_document,
--      FK_OPLID=pFK_OPLID,
      FN_SUM=pFN_SUM
    WHERE FK_ID=pFK_ID;
    nTemp1:=pFK_ID;
  end if;
  if pFK_PRYB>2 then
    UPDATE TSROKY SET
      FD_DATA3=pFD_DATA1,
      FK_VYB=pFK_PRYB
    where FK_ID=(SELECT MAX(FK_ID) FROM TSROKY WHERE FK_ID<(SELECT MAX(FK_ID) FROM TSROKY WHERE FK_PACID=pFK_PACID) AND FK_PACID=pFK_PACID);
  end if;
-- DO_ARRANGE_SROKY(pFK_PACID);
END; -- Procedure
/

SHOW ERRORS;


