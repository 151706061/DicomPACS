DROP TABLE ASU.TANALIZATOR_COMPARISONS CASCADE CONSTRAINTS
/

--
-- TANALIZATOR_COMPARISONS  (Table) 
--
CREATE TABLE ASU.TANALIZATOR_COMPARISONS
(
  FK_ID             NUMBER                      NOT NULL,
  FK_ANALIZATORID   NUMBER(15),
  FK_COMPARISID     NUMBER(15),
  FC_COMMAND        VARCHAR2(250 BYTE),
  FC_IDENTIFICATOR  VARCHAR2(50 BYTE)
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOLOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE ASU.TANALIZATOR_COMPARISONS IS 'Таблица связка между TS_ANALIZATOR и TBL_COMPARISONS'
/

COMMENT ON COLUMN ASU.TANALIZATOR_COMPARISONS.FK_ID IS 'Уникальный номер'
/

COMMENT ON COLUMN ASU.TANALIZATOR_COMPARISONS.FK_ANALIZATORID IS 'TS_ANALIZATOR.FK_ID'
/

COMMENT ON COLUMN ASU.TANALIZATOR_COMPARISONS.FK_COMPARISID IS 'TBL_COMPARISONS.FK_ID'
/

COMMENT ON COLUMN ASU.TANALIZATOR_COMPARISONS.FC_COMMAND IS 'Команда для анализатора'
/

COMMENT ON COLUMN ASU.TANALIZATOR_COMPARISONS.FC_IDENTIFICATOR IS 'Внешний идентификатор для конкретного анализатора'
/


--
-- TANAL_BY_ID  (Index) 
--
--  Dependencies: 
--   TANALIZATOR_COMPARISONS (Table)
--
CREATE UNIQUE INDEX ASU.TANAL_BY_ID ON ASU.TANALIZATOR_COMPARISONS
(FK_ID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TANAL_COMPAR_ANALID  (Index) 
--
--  Dependencies: 
--   TANALIZATOR_COMPARISONS (Table)
--
CREATE INDEX ASU.TANAL_COMPAR_ANALID ON ASU.TANALIZATOR_COMPARISONS
(FK_ANALIZATORID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TANAL_COMPAR_COMPARID  (Index) 
--
--  Dependencies: 
--   TANALIZATOR_COMPARISONS (Table)
--
CREATE INDEX ASU.TANAL_COMPAR_COMPARID ON ASU.TANALIZATOR_COMPARISONS
(FK_COMPARISID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TANAL_COMPAR_BEFORE_INSERT  (Trigger) 
--
--  Dependencies: 
--   TANALIZATOR_COMPARISONS (Table)
--
CREATE OR REPLACE TRIGGER ASU."TANAL_COMPAR_BEFORE_INSERT" 
 BEFORE 
 INSERT
 ON ASU.TANALIZATOR_COMPARISONS  FOR EACH ROW
begin
  select seq_tanal_compar.NEXTVAL into :new.fk_id from dual;
end;
/
SHOW ERRORS;


--
-- TANALIZATOR_COMPARISONS_LOG  (Trigger) 
--
--  Dependencies: 
--   TANALIZATOR_COMPARISONS (Table)
--
CREATE OR REPLACE TRIGGER ASU."TANALIZATOR_COMPARISONS_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TANALIZATOR_COMPARISONS  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DECLARE
  nTemp NUMBER;
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_COMMAND), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
   elsif DELETING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_COMMAND), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
  elsif UPDATING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    if UPDATING ('FK_ANALIZATORID') AND PKG_LOG.GET_VALUE(:old.FK_ANALIZATORID) <> PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_ANALIZATORID), PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :old.fk_id);
    end if;
    if UPDATING ('FK_COMPARISID') AND PKG_LOG.GET_VALUE(:old.FK_COMPARISID) <> PKG_LOG.GET_VALUE(:new.FK_COMPARISID) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_COMPARISID), PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :old.fk_id);
    end if;
    if UPDATING ('FC_COMMAND') AND PKG_LOG.GET_VALUE(:old.FC_COMMAND) <> PKG_LOG.GET_VALUE(:new.FC_COMMAND) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_COMMAND), PKG_LOG.GET_VALUE(:new.FC_COMMAND), :old.fk_id);
    end if;
    if UPDATING ('FC_IDENTIFICATOR') AND PKG_LOG.GET_VALUE(:old.FC_IDENTIFICATOR) <> PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_IDENTIFICATOR), PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
    end if;
  end if;
END TANALIZATOR_COMPARISONS_LOG;
/
SHOW ERRORS;


