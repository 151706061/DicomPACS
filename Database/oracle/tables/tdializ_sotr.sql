DROP TABLE ASU.TDIALIZ_SOTR CASCADE CONSTRAINTS
/

--
-- TDIALIZ_SOTR  (Table) 
--
CREATE TABLE ASU.TDIALIZ_SOTR
(
  FK_ID             NUMBER                      NOT NULL,
  FK_DIALIZKARTAID  NUMBER,
  FK_SOTRID         NUMBER,
  FK_SMID           NUMBER,
  FD_DATE           DATE,
  FK_DIALIZ_NAZ_ID  NUMBER
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOLOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON COLUMN ASU.TDIALIZ_SOTR.FK_SMID IS 'врач диализного зала,врач-нефролог,медсестра'
/


--
-- I_TDIALIZ_SOTR_DIALIZKARTAID  (Index) 
--
--  Dependencies: 
--   TDIALIZ_SOTR (Table)
--
CREATE INDEX ASU.I_TDIALIZ_SOTR_DIALIZKARTAID ON ASU.TDIALIZ_SOTR
(FK_DIALIZKARTAID)
NOLOGGING
TABLESPACE USR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- I_TDIALIZ_SOTR_DIALIZ_NAZ_ID  (Index) 
--
--  Dependencies: 
--   TDIALIZ_SOTR (Table)
--
CREATE INDEX ASU.I_TDIALIZ_SOTR_DIALIZ_NAZ_ID ON ASU.TDIALIZ_SOTR
(FK_DIALIZ_NAZ_ID)
NOLOGGING
TABLESPACE USR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- I_TDIALIZ_SOTR_SMID  (Index) 
--
--  Dependencies: 
--   TDIALIZ_SOTR (Table)
--
CREATE INDEX ASU.I_TDIALIZ_SOTR_SMID ON ASU.TDIALIZ_SOTR
(FK_SMID)
NOLOGGING
TABLESPACE USR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TDIALIZ_SOTR_BEFORE_INSERT  (Trigger) 
--
--  Dependencies: 
--   TDIALIZ_SOTR (Table)
--
CREATE OR REPLACE TRIGGER ASU."TDIALIZ_SOTR_BEFORE_INSERT"
  BEFORE INSERT
  ON ASU.TDIALIZ_SOTR   REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  SELECT ASU.SEQ_TDIALIZ_SOTR.NEXTVAL INTO :NEW.FK_ID FROM DUAL;
END;
/
SHOW ERRORS;


--
-- TDIALIZ_SOTR_LOG  (Trigger) 
--
--  Dependencies: 
--   TDIALIZ_SOTR (Table)
--
CREATE OR REPLACE TRIGGER ASU."TDIALIZ_SOTR_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TDIALIZ_SOTR  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DISABLE
DECLARE
  nTemp NUMBER;
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SOTRID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_SOTRID), :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SMID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_SMID), :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZ_NAZ_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_DIALIZ_NAZ_ID), :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZKARTAID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_DIALIZKARTAID), :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FD_DATE', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FD_DATE), :new.fk_id);
  elsif DELETING then
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_ID', 'DELETE', PKG_LOG.GET_VALUE(:new.fk_id), null, :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SOTRID', 'DELETE', PKG_LOG.GET_VALUE(:new.FK_SOTRID), null, :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SMID', 'DELETE', PKG_LOG.GET_VALUE(:new.FK_SMID), null, :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZ_NAZ_ID', 'DELETE', PKG_LOG.GET_VALUE(:new.FK_DIALIZ_NAZ_ID), null, :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZKARTAID', 'DELETE', PKG_LOG.GET_VALUE(:new.FK_DIALIZKARTAID), null, :new.fk_id);
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FD_DATE', 'DELETE', PKG_LOG.GET_VALUE(:new.FD_DATE), null, :new.fk_id);
  ELSIF updating THEN
    PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    IF updating('FK_SOTRID') AND PKG_LOG.GET_VALUE(:old.FK_SOTRID) <> PKG_LOG.GET_VALUE(:new.FK_SOTRID) THEN
     PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SOTRID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_SOTRID), PKG_LOG.GET_VALUE(:new.FK_SOTRID), :old.fk_id);
    END IF;
    IF updating('FK_SMID') AND PKG_LOG.GET_VALUE(:old.FK_SMID) <> PKG_LOG.GET_VALUE(:new.FK_SMID) THEN
     PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_SMID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_SMID), PKG_LOG.GET_VALUE(:new.FK_SMID), :old.fk_id);
    END IF;
    IF updating('FK_DIALIZ_NAZ_ID') AND PKG_LOG.GET_VALUE(:old.FK_DIALIZ_NAZ_ID) <> PKG_LOG.GET_VALUE(:new.FK_DIALIZ_NAZ_ID) THEN
     PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZ_NAZ_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_DIALIZ_NAZ_ID), PKG_LOG.GET_VALUE(:new.FK_DIALIZ_NAZ_ID), :old.fk_id);
    END IF;
    IF updating('FK_DIALIZKARTAID') AND PKG_LOG.GET_VALUE(:old.FK_DIALIZKARTAID) <> PKG_LOG.GET_VALUE(:new.FK_DIALIZKARTAID) THEN
     PKG_LOG.Do_log('TDIALIZ_SOTR', 'FK_DIALIZKARTAID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_DIALIZKARTAID), PKG_LOG.GET_VALUE(:new.FK_DIALIZKARTAID), :old.fk_id);
    END IF;
    IF updating('FD_DATE') AND PKG_LOG.GET_VALUE(:old.FD_DATE) <> PKG_LOG.GET_VALUE(:new.FD_DATE) THEN
     PKG_LOG.Do_log('TDIALIZ_SOTR', 'FD_DATE', 'UPDATE', PKG_LOG.GET_VALUE(:old.FD_DATE), PKG_LOG.GET_VALUE(:new.FD_DATE), :old.fk_id);
    END IF;
  end if;
  null;
END TADRESS_LOG;
/
SHOW ERRORS;


