DROP TABLE ASU.TFILES CASCADE CONSTRAINTS
/

--
-- TFILES  (Table) 
--
CREATE TABLE ASU.TFILES
(
  FK_ID      NUMBER(15)                         NOT NULL,
  FK_BLOBID  NUMBER(15),
  FL_SHOWIB  NUMBER(1)                          DEFAULT 1,
  FK_NAZID   NUMBER(15),
  FC_NAME    VARCHAR2(240 BYTE)
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          160K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE ASU.TFILES IS 'Для вложений-документов by TimurLan '
/

COMMENT ON COLUMN ASU.TFILES.FK_ID IS 'SEQUENCE=[SEQ_TFILES]'
/

COMMENT ON COLUMN ASU.TFILES.FK_BLOBID IS 'Ключ на TBLOBS.FK_ID'
/

COMMENT ON COLUMN ASU.TFILES.FL_SHOWIB IS '1 - показывать при формировании истории болезни, 0 - не показывать'
/

COMMENT ON COLUMN ASU.TFILES.FK_NAZID IS 'Ключ на назначение или др. разделы ИБ'
/

COMMENT ON COLUMN ASU.TFILES.FC_NAME IS 'Имя файла с расширением'
/


--
-- TFILES_LOG  (Trigger) 
--
--  Dependencies: 
--   TFILES (Table)
--
CREATE OR REPLACE TRIGGER ASU."TFILES_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TFILES  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TFILES', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TFILES', 'FK_BLOBID', 'INSERT', PKG_LOG.GET_VALUE(:old.FK_BLOBID), PKG_LOG.GET_VALUE(:new.FK_BLOBID), :new.fk_id);
    PKG_LOG.Do_log('TFILES', 'FL_SHOWIB', 'INSERT', PKG_LOG.GET_VALUE(:old.FL_SHOWIB), PKG_LOG.GET_VALUE(:new.FL_SHOWIB), :new.fk_id);
    PKG_LOG.Do_log('TFILES', 'FK_NAZID', 'INSERT', PKG_LOG.GET_VALUE(:old.FK_NAZID), PKG_LOG.GET_VALUE(:new.FK_NAZID), :new.fk_id);
  elsif UPDATING then
    PKG_LOG.Do_log('TFILES', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    if UPDATING ('FK_BLOBID') AND PKG_LOG.GET_VALUE(:old.FK_BLOBID) <> PKG_LOG.GET_VALUE(:new.FK_BLOBID) then
      PKG_LOG.Do_log('TFILES', 'FK_BLOBID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_BLOBID), PKG_LOG.GET_VALUE(:new.FK_BLOBID), :old.fk_id);
    end if;
    if UPDATING ('FL_SHOWIB') AND PKG_LOG.GET_VALUE(:old.FL_SHOWIB) <> PKG_LOG.GET_VALUE(:new.FL_SHOWIB) then
      PKG_LOG.Do_log('TFILES', 'FL_SHOWIB', 'UPDATE', PKG_LOG.GET_VALUE(:old.FL_SHOWIB), PKG_LOG.GET_VALUE(:new.FL_SHOWIB), :old.fk_id);
    end if;
    if UPDATING ('FK_NAZID') AND PKG_LOG.GET_VALUE(:old.FK_NAZID) <> PKG_LOG.GET_VALUE(:new.FK_NAZID) then
      PKG_LOG.Do_log('TFILES', 'FK_NAZID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_NAZID), PKG_LOG.GET_VALUE(:new.FK_NAZID), :old.fk_id);
    end if;
  end if;
END;
/
SHOW ERRORS;


--
-- TFILES_BEFORE_INSERT  (Trigger) 
--
--  Dependencies: 
--   TFILES (Table)
--
CREATE OR REPLACE TRIGGER ASU."TFILES_BEFORE_INSERT" 
BEFORE INSERT ON ASU.TFILES REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
Begin
  SELECT SEQ_TFILES.NEXTVAL INTO :NEW.FK_ID FROM DUAL;
End;
/
SHOW ERRORS;


--
-- TFILES_AFTER_DELETE  (Trigger) 
--
--  Dependencies: 
--   TFILES (Table)
--
CREATE OR REPLACE TRIGGER ASU."TFILES_AFTER_DELETE" 
  AFTER DELETE ON ASU.TFILES   REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
BEGIN
  DELETE FROM TBLOBS WHERE FK_ID = :old.FK_BLOBID;
END;
/
SHOW ERRORS;


