DROP TABLE ASU.TPACLST CASCADE CONSTRAINTS
/

--
-- TPACLST  (Table) 
--
CREATE TABLE ASU.TPACLST
(
  FK_GRAPHID  NUMBER(15),
  FK_PACID    NUMBER(15),
  NAZID       NUMBER(15),
  FD_INSDATE  DATE                              DEFAULT SYSDATE,
  FK_SOTRID   NUMBER,
  FL_BRON     NUMBER                            DEFAULT 0
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          1768K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE ASU.TPACLST IS 'Список пациентов на расписание'
/

COMMENT ON COLUMN ASU.TPACLST.FK_GRAPHID IS 'Код периода в расписании TGRAPH.FK_ID'
/

COMMENT ON COLUMN ASU.TPACLST.FK_PACID IS 'Код пациента'
/

COMMENT ON COLUMN ASU.TPACLST.NAZID IS 'Код назначения VNAZ.FK_ID'
/

COMMENT ON COLUMN ASU.TPACLST.FD_INSDATE IS 'Когда распределил'
/

COMMENT ON COLUMN ASU.TPACLST.FK_SOTRID IS 'Кто распределил'
/


--
-- TPACLST_GRAPHID  (Index) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE INDEX ASU.TPACLST_GRAPHID ON ASU.TPACLST
(FK_GRAPHID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1792K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TPACLST_PACID  (Index) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE INDEX ASU.TPACLST_PACID ON ASU.TPACLST
(FK_PACID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1792K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TPACLST$WEB_REPLICATION2  (Trigger) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE OR REPLACE TRIGGER ASU.TPACLST$WEB_REPLICATION2
 AFTER
 INSERT OR DELETE
 ON ASU.TPACLST  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DECLARE
  cnt NUMBER;
BEGIN
    IF DELETING THEN
       SELECT COUNT(*) INTO cnt from asu.traspis_schema r INNER JOIN asu.Tgraph g 
       on r.fk_graphid = g.fk_raspid
       WHERE g.fk_id = :OLD.FK_GRAPHID AND r.fk_schemaid = stat.pkg_statutil.get_smidid('RASPIS_PORTAL') 
             AND g.ft_end > SYSDATE;
       IF cnt = 0
       THEN
          RETURN;
       END IF;

        --ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :OLD.FK_GRAPHID, 'UPDATE', 'TGRAPH$WEB_REPLICATION');
        INSERT INTO ASU.WEB_BUFFER_TRANSFER2(REGIST_DATE, TABLE_NAME, KEY_FIELD_VALUE, ACTION, FC_INFO, FC_USERNAME)
        VALUES(SYSDATE, 'TPACLST', :OLD.FK_GRAPHID, 'DELETE', 'TGRAPH$WEB_REPLICATION',
                        (SELECT MAX(USERNAME) FROM V$SESSION WHERE AUDSID=USERENV('SESSIONID')));
    ELSE
       SELECT COUNT(*) INTO cnt from asu.traspis_schema r INNER JOIN asu.Tgraph g
       on r.fk_graphid = g.fk_raspid
       WHERE g.fk_id = :NEW.FK_GRAPHID AND r.fk_schemaid = stat.pkg_statutil.get_smidid('RASPIS_PORTAL');

       IF cnt = 0
       THEN
          RETURN;
       END IF;

        --ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :NEW.FK_GRAPHID, 'UPDATE', 'TGRAPH$WEB_REPLICATION');
        INSERT INTO ASU.WEB_BUFFER_TRANSFER2(REGIST_DATE, TABLE_NAME, KEY_FIELD_VALUE, ACTION, FC_INFO, FC_USERNAME)
        VALUES(SYSDATE, 'TPACLST', :NEW.FK_GRAPHID, 'INSERT', 'TGRAPH$WEB_REPLICATION', (SELECT MAX(USERNAME) FROM V$SESSION WHERE AUDSID=USERENV('SESSIONID')));
    END IF;

END;
/
SHOW ERRORS;


--
-- TPACLST$WEB_REPLICATION  (Trigger) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE OR REPLACE TRIGGER ASU.TPACLST$WEB_REPLICATION
 BEFORE 
 INSERT OR DELETE
 ON ASU.TPACLST  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
  IF NOT ASU.PKG_EXCH_SAMOZAPIS.IS_REPL THEN
    IF DELETING THEN
        --ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :OLD.FK_GRAPHID, 'UPDATE', 'TGRAPH$WEB_REPLICATION');
        INSERT INTO ASU.WEB_BUFFER_TRANSFER(REGIST_DATE, TABLE_NAME, KEY_FIELD_VALUE, ACTION)
        VALUES(SYSDATE, 'TGRAPH', :OLD.FK_GRAPHID, 'UPDATE');
    ELSE
        --ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :NEW.FK_GRAPHID, 'UPDATE', 'TGRAPH$WEB_REPLICATION');
        INSERT INTO ASU.WEB_BUFFER_TRANSFER(REGIST_DATE, TABLE_NAME, KEY_FIELD_VALUE, ACTION)
        VALUES(SYSDATE, 'TGRAPH', :NEW.FK_GRAPHID, 'UPDATE');
    END IF;
  END IF;
END;

/*CREATE OR REPLACE TRIGGER "TPACLST$WEB_REPLICATION" 
 BEFORE
 INSERT OR DELETE
 ON ASU.TPACLST
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
  IF NOT ASU.PKG_EXCH_SAMOZAPIS.IS_REPL THEN
    IF DELETING THEN
        ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :OLD.FK_GRAPHID, 'UPDATE');
    ELSE
        ASU.PKG_EXCH_SAMOZAPIS.DO_LOG('TGRAPH', :NEW.FK_GRAPHID, 'UPDATE');
    END IF;
  END IF;
END;*/
/
SHOW ERRORS;


--
-- TPACLST_SERV_DEL_CANCEL  (Trigger) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE OR REPLACE TRIGGER ASU."TPACLST_SERV_DEL_CANCEL" 
 BEFORE
  DELETE
 ON asu.tpaclst
REFERENCING NEW AS NEW OLD AS OLD
 FOR EACH ROW
DISABLE
DECLARE
  sMODULENAME varchar2(4000);
BEGIN
  SELECT PROGRAM
    INTO sMODULENAME
    FROM V$SESSION
   WHERE AUDSID = USERENV('SESSIONID');

   if sMODULENAME = 'SamozapisClientService.exe' then
    raise_application_error(-20003,'невозможно удалить точку расписания через сервис');
   end if;

END;
/
SHOW ERRORS;


--
-- TPACLST_LOG  (Trigger) 
--
--  Dependencies: 
--   TPACLST (Table)
--
CREATE OR REPLACE TRIGGER ASU."TPACLST_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TPACLST  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DECLARE
  nTemp NUMBER;
BEGIN
  if DELETING then
    PKG_LOG.Do_log('TPACLST', 'NAZID', 'DELETE', PKG_LOG.GET_VALUE(:old.nazid), null, :old.fk_graphid);
    PKG_LOG.Do_log('TPACLST', 'FK_GRAPHID', 'DELETE', PKG_LOG.GET_VALUE(:old.fk_graphid), null, :old.fk_graphid);
    PKG_LOG.Do_log('TPACLST', 'FK_PACID', 'DELETE', PKG_LOG.GET_VALUE(:old.fk_pacid), null, :old.fk_graphid);
  elsif INSERTING then
    PKG_LOG.Do_log('TPACLST', 'NAZID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.nazid), :new.fk_graphid);
    PKG_LOG.Do_log('TPACLST', 'FK_GRAPHID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_graphid), :new.fk_graphid);
    PKG_LOG.Do_log('TPACLST', 'FK_PACID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_pacid), :new.fk_graphid);
  end if;
  null;
END TPACLST_LOG;
/
SHOW ERRORS;


-- 
-- Non Foreign Key Constraints for Table TPACLST 
-- 
ALTER TABLE ASU.TPACLST ADD (
  CONSTRAINT TPACLST_ONLYPAC
 UNIQUE (FK_GRAPHID))
/

