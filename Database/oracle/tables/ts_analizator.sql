DROP TABLE ASU.TS_ANALIZATOR CASCADE CONSTRAINTS
/

--
-- TS_ANALIZATOR  (Table) 
--
CREATE TABLE ASU.TS_ANALIZATOR
(
  FK_ID                  NUMBER                 NOT NULL,
  FC_NAME                VARCHAR2(255 BYTE),
  FC_CLSID               VARCHAR2(150 BYTE),
  FC_MODE                VARCHAR2(150 BYTE),
  FC_DRIVERID            VARCHAR2(150 BYTE),
  FC_DEBUG               VARCHAR2(150 BYTE),
  FC_EVENTINTERVAL       VARCHAR2(150 BYTE),
  FC_SPLITCOUNT          VARCHAR2(150 BYTE),
  FK_PORTNUMBER          NUMBER(5),
  FC_HOST                VARCHAR2(15 BYTE),
  FL_TYPE                NUMBER,
  FN_TYPE                NUMBER,
  BASE_APPLICATION_NAME  VARCHAR2(255 BYTE),
  DLL_NAME               VARCHAR2(255 BYTE),
  DISPLAY_NAME           VARCHAR2(255 BYTE),
  BUFFER_SIZE            NUMBER,
  TIME_OUT               NUMBER,
  READ_REFRESH_INTERVAL  NUMBER,
  CONNECTION_TYPE        NUMBER,
  ANALIZATOR_DATA_TYPE   NUMBER,
  PORT_NUMBER            VARCHAR2(10 BYTE),
  INIT_PARAMS            VARCHAR2(255 BYTE),
  DIR_NAME               VARCHAR2(255 BYTE),
  FILE_MASK              VARCHAR2(255 BYTE),
  IP_ADRESS              VARCHAR2(20 BYTE),
  LOG_LEVEL              NUMBER,
  NOT_USED               NUMBER                 DEFAULT 0
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOLOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE ASU.TS_ANALIZATOR IS 'Справочник анализаторов'
/

COMMENT ON COLUMN ASU.TS_ANALIZATOR.FK_ID IS 'Уникальный номер'
/

COMMENT ON COLUMN ASU.TS_ANALIZATOR.FC_NAME IS 'Имя анализатора'
/

COMMENT ON COLUMN ASU.TS_ANALIZATOR.FC_HOST IS 'Ip Moxa'
/


--
-- TS_ANALIZATOR_ID  (Index) 
--
--  Dependencies: 
--   TS_ANALIZATOR (Table)
--
CREATE UNIQUE INDEX ASU.TS_ANALIZATOR_ID ON ASU.TS_ANALIZATOR
(FK_ID)
NOLOGGING
TABLESPACE INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


--
-- TS_ANALIZATOR_LOG  (Trigger) 
--
--  Dependencies: 
--   TS_ANALIZATOR (Table)
--
CREATE OR REPLACE TRIGGER ASU."TS_ANALIZATOR_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TS_ANALIZATOR  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DECLARE
  nTemp NUMBER;
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_NAME', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_NAME), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_CLSID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_CLSID), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_MODE', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_MODE), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DRIVERID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_DRIVERID), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DEBUG', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_DEBUG), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_EVENTINTERVAL', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_EVENTINTERVAL), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_SPLITCOUNT', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_SPLITCOUNT), :new.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_PORTNUMBER', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_PORTNUMBER), :new.fk_id);
  elsif DELETING then
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_ID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_NAME', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_NAME), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_CLSID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_CLSID), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_MODE', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_MODE), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DRIVERID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_DRIVERID), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DEBUG', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_DEBUG), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_EVENTINTERVAL', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_EVENTINTERVAL), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_SPLITCOUNT', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_SPLITCOUNT), :old.fk_id);
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_PORTNUMBER', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FK_PORTNUMBER), :old.fk_id);
  elsif UPDATING then
    PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    if UPDATING ('FC_NAME') AND PKG_LOG.GET_VALUE(:old.FC_NAME) <> PKG_LOG.GET_VALUE(:new.FC_NAME) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_NAME', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_NAME), PKG_LOG.GET_VALUE(:new.FC_NAME), :old.fk_id);
    end if;
    if UPDATING ('FC_CLSID') AND PKG_LOG.GET_VALUE(:old.FC_CLSID) <> PKG_LOG.GET_VALUE(:new.FC_CLSID) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_CLSID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_CLSID), PKG_LOG.GET_VALUE(:new.FC_CLSID), :old.fk_id);
    end if;
    if UPDATING ('FC_DRIVERID') AND PKG_LOG.GET_VALUE(:old.FC_DRIVERID) <> PKG_LOG.GET_VALUE(:new.FC_DRIVERID) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DRIVERID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_DRIVERID), PKG_LOG.GET_VALUE(:new.FC_DRIVERID), :old.fk_id);
    end if;
    if UPDATING ('FC_DEBUG') AND PKG_LOG.GET_VALUE(:old.FC_DEBUG) <> PKG_LOG.GET_VALUE(:new.FC_DEBUG) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_DEBUG', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_DEBUG), PKG_LOG.GET_VALUE(:new.FC_DEBUG), :old.fk_id);
    end if;
    if UPDATING ('FC_EVENTINTERVAL') AND PKG_LOG.GET_VALUE(:old.FC_EVENTINTERVAL) <> PKG_LOG.GET_VALUE(:new.FC_EVENTINTERVAL) then
      PKG_LOG.Do_log('TKARTA', 'FC_EVENTINTERVAL', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_EVENTINTERVAL), PKG_LOG.GET_VALUE(:new.FC_EVENTINTERVAL), :old.fk_id);
    end if;
    if UPDATING ('FC_SPLITCOUNT') AND PKG_LOG.GET_VALUE(:old.FC_SPLITCOUNT) <> PKG_LOG.GET_VALUE(:new.FC_SPLITCOUNT) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FC_SPLITCOUNT', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_SPLITCOUNT), PKG_LOG.GET_VALUE(:new.FC_SPLITCOUNT), :old.fk_id);
    end if;
    if UPDATING ('FK_PORTNUMBER') AND PKG_LOG.GET_VALUE(:old.FK_PORTNUMBER) <> PKG_LOG.GET_VALUE(:new.FK_PORTNUMBER) then
      PKG_LOG.Do_log('TS_ANALIZATOR', 'FK_PORTNUMBER', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_PORTNUMBER), PKG_LOG.GET_VALUE(:new.FK_PORTNUMBER), :old.fk_id);
    end if;
  end if;
END TS_ANALIZATOR_LOG;
/
SHOW ERRORS;


--
-- TS_ANALIZATOR_BEFORE_INSERT  (Trigger) 
--
--  Dependencies: 
--   TS_ANALIZATOR (Table)
--
CREATE OR REPLACE TRIGGER ASU."TS_ANALIZATOR_BEFORE_INSERT" 
 BEFORE 
 INSERT
 ON ASU.TS_ANALIZATOR  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
    SELECT SEQ_TS_ANALIZATOR.NEXTVAL INTO :NEW.FK_ID FROM DUAL;
end;
/
SHOW ERRORS;


