DROP TABLE ASU.TSTOMPOS CASCADE CONSTRAINTS
/

--
-- TSTOMPOS  (Table) 
--
CREATE TABLE ASU.TSTOMPOS
(
  STOMPOSID  NUMBER(9),
  FC_NAME    VARCHAR2(255 BYTE),
  FN_X       NUMBER,
  FN_Y       NUMBER,
  FK_PICSID  NUMBER,
  FN_NUM     NUMBER,
  FK_ID      NUMBER
)
TABLESPACE USR
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          7640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE ASU.TSTOMPOS IS 'Карта зубов by TimurLan '
/

COMMENT ON COLUMN ASU.TSTOMPOS.STOMPOSID IS 'ID'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FC_NAME IS 'название'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FN_X IS 'коорд. по X'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FN_Y IS 'коорд. по Y'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FK_PICSID IS 'код картнки'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FN_NUM IS 'номер'
/

COMMENT ON COLUMN ASU.TSTOMPOS.FK_ID IS 'SEQUENCE=[SEQ_TSTOMPOS]'
/


--
-- TSTOMPOS_LOG  (Trigger) 
--
--  Dependencies: 
--   TSTOMPOS (Table)
--
CREATE OR REPLACE TRIGGER ASU."TSTOMPOS_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TSTOMPOS  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TSTOMPOS', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TSTOMPOS', 'STOMPOSID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.STOMPOSID), :new.fk_id);
    PKG_LOG.Do_log('TSTOMPOS', 'FC_NAME', 'INSERT', PKG_LOG.GET_VALUE(:old.FC_NAME), PKG_LOG.GET_VALUE(:new.FC_NAME), :new.fk_id);
    PKG_LOG.Do_log('TSTOMPOS', 'FK_PICSID', 'INSERT', PKG_LOG.GET_VALUE(:old.FK_PICSID), PKG_LOG.GET_VALUE(:new.FK_PICSID), :new.fk_id);
  elsif UPDATING then
    PKG_LOG.Do_log('TSTOMPOS', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    if UPDATING ('STOMPOSID') AND PKG_LOG.GET_VALUE(:old.STOMPOSID) <> PKG_LOG.GET_VALUE(:new.STOMPOSID) then
      PKG_LOG.Do_log('TSTOMPOS', 'STOMPOSID', 'UPDATE', PKG_LOG.GET_VALUE(:old.STOMPOSID), PKG_LOG.GET_VALUE(:new.STOMPOSID), :old.fk_id);
    end if;
    if UPDATING ('FC_NAME') AND PKG_LOG.GET_VALUE(:old.FC_NAME) <> PKG_LOG.GET_VALUE(:new.FC_NAME) then
      PKG_LOG.Do_log('TSTOMPOS', 'FC_NAME', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_NAME), PKG_LOG.GET_VALUE(:new.FC_NAME), :old.fk_id);
    end if;
    if UPDATING ('FK_PICSID') AND PKG_LOG.GET_VALUE(:old.FK_PICSID) <> PKG_LOG.GET_VALUE(:new.FK_PICSID) then
      PKG_LOG.Do_log('TSTOMPOS', 'FK_PICSID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_PICSID), PKG_LOG.GET_VALUE(:new.FK_PICSID), :old.fk_id);
    end if;
  end if;
END;
/
SHOW ERRORS;


--
-- TSTOMPOS_INS  (Trigger) 
--
--  Dependencies: 
--   TSTOMPOS (Table)
--
CREATE OR REPLACE TRIGGER ASU."TSTOMPOS_INS" 
  BEFORE INSERT ON tstompos
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
Begin
  select seq_tstompos.nextval, seq_tstompos.nextval
    into :new.fk_id, :new.stomposid
    from dual;
  --select seq_tstompos.nextval into :new.stomposid from dual; by TimurLan
End;
/
SHOW ERRORS;


