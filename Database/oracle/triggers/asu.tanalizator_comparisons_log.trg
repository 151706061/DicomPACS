DROP TRIGGER ASU.TANALIZATOR_COMPARISONS_LOG
/

--
-- TANALIZATOR_COMPARISONS_LOG  (Trigger) 
--
--  Dependencies: 
--   STANDARD (Package)
--   DBMS_STANDARD (Package)
--   TANALIZATOR_COMPARISONS (Table)
--   PKG_LOG (Package)
--
CREATE OR REPLACE TRIGGER ASU."TANALIZATOR_COMPARISONS_LOG" 
 AFTER
 INSERT OR DELETE OR UPDATE
 ON ASU.TANALIZATOR_COMPARISONS  REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
DECLARE
  nTemp NUMBER;
BEGIN
  if INSERTING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.fk_id), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'INSERT', null, PKG_LOG.GET_VALUE(:new.FC_COMMAND), :new.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
   elsif DELETING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_COMMAND), :old.fk_id);
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'DELETE', null, PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
  elsif UPDATING then
    PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ID', 'UPDATE', PKG_LOG.GET_VALUE(:old.fk_id), PKG_LOG.GET_VALUE(:new.fk_id), :old.fk_id);
    if UPDATING ('FK_ANALIZATORID') AND PKG_LOG.GET_VALUE(:old.FK_ANALIZATORID) <> PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_ANALIZATORID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_ANALIZATORID), PKG_LOG.GET_VALUE(:new.FK_ANALIZATORID), :old.fk_id);
    end if;
    if UPDATING ('FK_COMPARISID') AND PKG_LOG.GET_VALUE(:old.FK_COMPARISID) <> PKG_LOG.GET_VALUE(:new.FK_COMPARISID) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FK_COMPARISID', 'UPDATE', PKG_LOG.GET_VALUE(:old.FK_COMPARISID), PKG_LOG.GET_VALUE(:new.FK_COMPARISID), :old.fk_id);
    end if;
    if UPDATING ('FC_COMMAND') AND PKG_LOG.GET_VALUE(:old.FC_COMMAND) <> PKG_LOG.GET_VALUE(:new.FC_COMMAND) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_COMMAND', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_COMMAND), PKG_LOG.GET_VALUE(:new.FC_COMMAND), :old.fk_id);
    end if;
    if UPDATING ('FC_IDENTIFICATOR') AND PKG_LOG.GET_VALUE(:old.FC_IDENTIFICATOR) <> PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR) then
      PKG_LOG.Do_log('TANALIZATOR_COMPARISONS', 'FC_IDENTIFICATOR', 'UPDATE', PKG_LOG.GET_VALUE(:old.FC_IDENTIFICATOR), PKG_LOG.GET_VALUE(:new.FC_IDENTIFICATOR), :old.fk_id);
    end if;
  end if;
END TANALIZATOR_COMPARISONS_LOG;
/
SHOW ERRORS;


