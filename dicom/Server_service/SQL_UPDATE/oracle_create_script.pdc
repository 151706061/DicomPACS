drop TABLE PACS.APPLYTABLE;

CREATE TABLE PACS.APPLYTABLE (
    IDFIELD          CHAR(64) NOT NULL,
    NAMEFIELD        VARCHAR2(100),
    ENAMEFIELD       VARCHAR2(100),
    APPLY_TIME       TIMESTAMP,
    UIDFIELD         CHAR(70),
    BIRTHDATEFIELD   TIMESTAMP,
    SEXFIELD         CHAR(4),
    DOCTORFIELD      CHAR(16),
    DESCFIELD        CHAR(40),
    BSTATE           INTEGER,
    PROF             INTEGER,
    WARD             CHAR(16),
    MODALITY         CHAR(4),
    P_PID            CHAR(20),
    ACCESSIONNUMBER  CHAR(20),
    BODYPART         VARCHAR2(30)
);

ALTER TABLE PACS.APPLYTABLE ADD CONSTRAINT PK_APPLYTABLE PRIMARY KEY (IDFIELD);

comment on column PACS.APPLYTABLE.IDFIELD is 'уникальный id записи';
comment on column PACS.APPLYTABLE.NAMEFIELD is 'ФИО (eng)';
comment on column PACS.APPLYTABLE.ENAMEFIELD is 'ФИО (rus)';
comment on column PACS.APPLYTABLE.APPLY_TIME is 'Дата,время исследования';
comment on column PACS.APPLYTABLE.UIDFIELD is 'UID';
comment on column PACS.APPLYTABLE.BIRTHDATEFIELD is 'Дата рождения';
comment on column PACS.APPLYTABLE.SEXFIELD is 'Пол';
comment on column PACS.APPLYTABLE.DOCTORFIELD is 'Врач';
comment on column PACS.APPLYTABLE.DESCFIELD is 'Описание';
comment on column PACS.APPLYTABLE.BSTATE is 'Статус исследования : 1 - в процессе 2 - завершено';
comment on column PACS.APPLYTABLE.MODALITY is 'MODALITY';
comment on column PACS.APPLYTABLE.P_PID is 'PatientID';
comment on column PACS.APPLYTABLE.ACCESSIONNUMBER is 'ACCESSIONNUMBER';
comment on column PACS.APPLYTABLE.BODYPART is 'Часть тела';

drop TABLE PACS.CNS_DICOMDISPLAY;
CREATE TABLE PACS.CNS_DICOMDISPLAY (
    MODALITY    CHAR(8) NOT NULL,
    W_POSITION  CHAR(4) NOT NULL,
    DISPLAY_ID  INTEGER NOT NULL,
    GROUP_ID    INTEGER NOT NULL,
    ELEMENT_ID  INTEGER NOT NULL,
    TITLE       CHAR(24),
    CALLEDAE    CHAR(1)
);

ALTER TABLE PACS.CNS_DICOMDISPLAY ADD PRIMARY KEY (MODALITY, W_POSITION, DISPLAY_ID);

CREATE INDEX PACS.CNS_DICOMDISPLAY_GROUP_ID ON PACS.CNS_DICOMDISPLAY (GROUP_ID);

drop TABLE PACS.CNS_LOOKUP_TABLE;

CREATE TABLE PACS.CNS_LOOKUP_TABLE (
    LUT_NAME  CHAR(20) NOT NULL,
    LUT_DATA  BLOB SUB_TYPE 0
);

ALTER TABLE PACS.CNS_LOOKUP_TABLE ADD PRIMARY KEY (LUT_NAME);

-- -----------------------------------------------------------------------------------------------------------------

drop TABLE PACS.CNS_MODILITY ;

CREATE TABLE PACS.CNS_MODILITY (
    PROF                       CHAR(20) NOT NULL,
    MODALITY                   CHAR(8),
    GROUPNAME                  CHAR(20),
    WORDCLASSIFY               CHAR(20),
    MWLFILTER                  CHAR(200),
    DISPLAYMODE                CHAR(20),
    DISPLAYFONT                INTEGER,
    AUTOGRID                   CHAR(1),
    DISPLAYROWS                INTEGER,
    DISPLAYCOLUMNS             INTEGER,
    DEFAULTDISPLAYINFO         CHAR(1),
    PRINTDPI                   CHAR(10),
    CANDICOMPRINT              CHAR(1),
    DEFAULTDISPLAYMODE         CHAR(10),
    FUNCTION2                  CHAR(1),
    CANDELETEIMAGE             CHAR(1),
    CAPTURE_SAVE_MODE          CHAR(4),
    CUT_SAVE_MODE              CHAR(4),
    IMAGE_SOURCE               CHAR(16),
    REPORT_SOURCE              CHAR(12),
    REPORT_SOURCE_OBJECTNAME   CHAR(40),
    REPORT_SOURCE_OBJECTNAME1  CHAR(40),
    REPORT_SOURCE_OBJECTNAME2  CHAR(40),
    REPORT_FILTER1             CHAR(200),
    REPORT_FILTER2             CHAR(200),
    REPORT_CLASSIFY            CHAR(200)
);

ALTER TABLE PACS.CNS_MODILITY ADD PRIMARY KEY (PROF);

CREATE INDEX PACS.CNS_MODILITY_GROUPNAME ON PACS.CNS_MODILITY (GROUPNAME);
CREATE INDEX PACS.CNS_MODILITY_MODALITY ON PACS.CNS_MODILITY (MODALITY);


drop TABLE PACS.CNS_USERSETTING ;

CREATE TABLE PACS.CNS_USERSETTING (
    USERNAME     CHAR(20) NOT NULL,
    SECTIONNAME  CHAR(20) NOT NULL,
    ITEMNAME     CHAR(24) NOT NULL,
    STRINGVALUE  CHAR(250)
);

ALTER TABLE PACS.CNS_USERSETTING ADD PRIMARY KEY (USERNAME, SECTIONNAME, ITEMNAME);


drop TABLE PACS.CNS_WINDOWS_SELF ;

CREATE TABLE PACS.CNS_WINDOWS_SELF (
    MODALITY        CHAR(2) NOT NULL,
    PARTNAME        CHAR(24) NOT NULL,
    WINDOW_WIDTH1   INTEGER,
    WINDOWS_LEVEL1  INTEGER,
    WINDOW_WIDTH2   INTEGER,
    WINDOWS_LEVEL2  INTEGER,
    WINDOW_WIDTH3   INTEGER,
    WINDOWS_LEVEL3  INTEGER
);

ALTER TABLE PACS.CNS_WINDOWS_SELF ADD PRIMARY KEY (MODALITY, PARTNAME);

CREATE GENERATOR PACS.GEN_CONCLUSIONS_ID;

drop TABLE PACS.CONCLUSIONS ;

CREATE TABLE PACS.CONCLUSIONS (
    FK_ID        INTEGER NOT NULL,
    FD_DATE      TIMESTAMP,
    FK_USERID    INTEGER,
    FC_NOTES     BLOB ,
    FK_STUDYUID  VARCHAR(80) NOT NULL
);

ALTER TABLE CONCLUSIONS ADD CONSTRAINT PK_CONCLUSIONS PRIMARY KEY (FK_ID);

CREATE INDEX CONCLUSIONS_IDX1 ON CONCLUSIONS (FK_USERID);
CREATE INDEX CONCLUSIONS_IDX2 ON CONCLUSIONS (FK_STUDYUID);

/* Trigger: CONCLUSIONS_BI0 */
CREATE OR ALTER TRIGGER CONCLUSIONS_BI0 FOR CONCLUSIONS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_conclusions_ID, 1);
  end
end;

DESCRIBE FIELD FK_ID TABLE CONCLUSIONS
'PK - первичный ключ';

DESCRIBE FIELD FD_DATE TABLE CONCLUSIONS
'Дата заключения';

DESCRIBE FIELD FK_USERID TABLE CONCLUSIONS
'ссылка на поле USERS.FK_ID';

DESCRIBE FIELD FC_NOTES TABLE CONCLUSIONS
'Текст заключения';

DESCRIBE FIELD FK_STUDYUID TABLE CONCLUSIONS
'studyuid - ссылка на таблицу study поле studyUID';

CREATE GENERATOR GEN_DEVICES_ID;


drop TABLE PACS.DEVICES ;

CREATE TABLE DEVICES (
    FK_ID        INTEGER NOT NULL,
    FC_IP        CHAR(100),
    FN_PORT      INTEGER,
    FC_TITLE     CHAR(15),
    FC_COMMENT   VARCHAR(250),
    FN_TYPE      INTEGER,
    FN_TRANSFER  INTEGER
);

ALTER TABLE DEVICES ADD CONSTRAINT PK_DEVICES PRIMARY KEY (FK_ID);

/* Trigger: DEVICES_BI0 */
CREATE OR ALTER TRIGGER DEVICES_BI0 FOR DEVICES
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_DEVICES_ID, 1);
  end
end;

DESCRIBE FIELD FN_TYPE TABLE DEVICES
'Тип устройства (1-сервер, 2-Рабочая станция, 3-принтер)';

DESCRIBE FIELD FN_TRANSFER TABLE DEVICES
'TRANSFER SYNTAX установленный по- умолчанию для отправки снимков с PACS';


drop TABLE PACS.DICOMPRINTER ;

CREATE TABLE DICOMPRINTER (
    NAME               CHAR(20) NOT NULL,
    IPADDRESS          CHAR(15),
    PRINTPORT          INTEGER,
    CALLINGAE          CHAR(24),
    CALLEDAE           CHAR(24),
    MAGNIFICATIONTYPE  CHAR(24),
    SMOOTHINGTYPE      CHAR(24),
    POLARITYTYPE       CHAR(24),
    BORDERDENSITY      CHAR(24),
    EMPTYIMAGEDENSITY  CHAR(24),
    TRIMTYPE           CHAR(24),
    MINDENSITY         INTEGER,
    MAXDENSITY         INTEGER,
    MEDIUMTYPE         CHAR(24),
    FILMDESTINATION    CHAR(24),
    COPIES             INTEGER,
    DEFAULTFORMAT      CHAR(24),
    FILMDIRECTION      CHAR(24),
    RESOLUTION         CHAR(24),
    PRIORI             CHAR(24),
    FILMSIZE           CHAR(24)
);

ALTER TABLE DICOMPRINTER ADD PRIMARY KEY (NAME);

CREATE GENERATOR GEN_EVENTS_ID;


drop TABLE PACS.EVENTS ;

CREATE TABLE EVENTS (
    FK_ID      INTEGER NOT NULL,
    FC_NAME    VARCHAR(255),
    FN_TYPE    INTEGER,
    FD_DATE    TIMESTAMP,
    FC_REMARK  VARCHAR(10000)
);

ALTER TABLE EVENTS ADD CONSTRAINT PK_EVENTS PRIMARY KEY (FK_ID);

CREATE INDEX EVENTS_IDX1 ON EVENTS (FD_DATE);

/* Trigger: EVENTS_BI0 */
CREATE OR ALTER TRIGGER EVENTS_BI0 FOR EVENTS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_EVENTS_ID, 1);
  end
end;

DESCRIBE TABLE EVENTS 'Таблица событий PACS-сервера';

DESCRIBE FIELD FK_ID TABLE EVENTS
'Уникальный ID';

DESCRIBE FIELD FC_NAME TABLE EVENTS
'Событие';

DESCRIBE FIELD FN_TYPE TABLE EVENTS
'Тип события
1 - запуск сервера
2 - остановка сервера
3 - ошибка
4 - событие на сервере
5 - изменились параметры сервера';

DESCRIBE FIELD FD_DATE TABLE EVENTS
'Дата события';

DESCRIBE FIELD FC_REMARK TABLE EVENTS
'Пометки';

CREATE GENERATOR GEN_EVENTS_RSND_ID;


drop TABLE PACS.EVENTS_RSND ;

CREATE TABLE EVENTS_RSND (
    FK_ID               INTEGER NOT NULL,
    FN_TYPE             SMALLINT,
    FC_CALLINGTITLE     VARCHAR(20),
    FC_CALLEDTITLE      VARCHAR(20),
    FC_STUDYUID         VARCHAR(80),
    FC_MODALITY         VARCHAR(4),
    FD_STUDYDATE        DATE,
    FD_DATE             DATE,
    FN_AMM              INTEGER,
    FN_AMM_ERR          INTEGER,
    FC_PATIENTID        VARCHAR(20),
    FC_PATIENTNAME      VARCHAR(250),
    FC_ENAME            VARCHAR(250),
    FC_ACCESSIONNUMBER  VARCHAR(100)
);

ALTER TABLE EVENTS_RSND ADD CONSTRAINT PK_EVENTS_RSND PRIMARY KEY (FK_ID);

/* Trigger: EVENTS_RSND_BD0 */
CREATE OR ALTER TRIGGER EVENTS_RSND_BD0 FOR EVENTS_RSND
ACTIVE BEFORE DELETE POSITION 0
AS
begin
  delete from EVENTS_RSND_ERR_LST where FK_ID_RSND=old.FK_ID;
end;

/* Trigger: EVENTS_RSND_BI0 */
CREATE OR ALTER TRIGGER EVENTS_RSND_BI0 FOR EVENTS_RSND
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_EVENTS_RSND_ID, 1);
  end
end;

DESCRIBE FIELD FK_ID TABLE EVENTS_RSND
'PK';

DESCRIBE FIELD FN_TYPE TABLE EVENTS_RSND
'0 - успешная пересылка  1 - ошибки';

DESCRIBE FIELD FC_CALLINGTITLE TABLE EVENTS_RSND
'AETITLE отправителя снимков';

DESCRIBE FIELD FC_CALLEDTITLE TABLE EVENTS_RSND
'AETITLE куда мы пересылаем';

DESCRIBE FIELD FC_STUDYUID TABLE EVENTS_RSND
'STUDYUID - UID исследования';

DESCRIBE FIELD FC_MODALITY TABLE EVENTS_RSND
'модальность исследования';

DESCRIBE FIELD FD_STUDYDATE TABLE EVENTS_RSND
'дата исследования';

DESCRIBE FIELD FD_DATE TABLE EVENTS_RSND
'дата пересылки';

DESCRIBE FIELD FN_AMM TABLE EVENTS_RSND
'Всего снимков в исследовании';

DESCRIBE FIELD FN_AMM_ERR TABLE EVENTS_RSND
'Всего снимков с ошибками при отправке';

DESCRIBE FIELD FC_PATIENTID TABLE EVENTS_RSND
'id пациента';

DESCRIBE FIELD FC_PATIENTNAME TABLE EVENTS_RSND
'ФИО пациента';

DESCRIBE FIELD FC_ENAME TABLE EVENTS_RSND
'ФИО пациента рус';

DESCRIBE FIELD FC_ACCESSIONNUMBER TABLE EVENTS_RSND
'ACCESSIONNUMBER';


drop TABLE PACS.EVENTS_RSND_ERR_LST ;

CREATE TABLE EVENTS_RSND_ERR_LST (
    FK_ID_RSND         INTEGER,
    FC_STUDYUID        VARCHAR(80),
    FC_INSTANCEUID     VARCHAR(80),
    FC_COMM            VARCHAR(250),
    FN_TRANSFERSYNTAX  INTEGER,
    FC_CALLEDTITLE     VARCHAR(20)
);

CREATE INDEX EVENTS_RSND_ERR_LST_IDX1 ON EVENTS_RSND_ERR_LST (FK_ID_RSND, FC_STUDYUID, FC_CALLEDTITLE);

DESCRIBE FIELD FK_ID_RSND TABLE EVENTS_RSND_ERR_LST
'ссылка на FK_id EVENTS_RSND';

DESCRIBE FIELD FC_STUDYUID TABLE EVENTS_RSND_ERR_LST
'STUDYUID
';

DESCRIBE FIELD FC_INSTANCEUID TABLE EVENTS_RSND_ERR_LST
'INSTANCEUID';

DESCRIBE FIELD FC_COMM TABLE EVENTS_RSND_ERR_LST
'текст ошибки
';

DESCRIBE FIELD FN_TRANSFERSYNTAX TABLE EVENTS_RSND_ERR_LST
'TRANSFERSYNTAX
.  .
описано в dcm_uid.pas в dicomVCL

PrivateTransferSyntax = 8192;
  ImplicitVRLittleEndian = 8193;
  ExplicitVRLittleEndian = 8194;
  ExplicitVRBigEndian = 8195;
  RLELossless = 8198;
  //JPEG_1 = 8196;
  JPEGBaseline = 8196;
  //JPEG_14_SelectionValue1 = 8197;
  JPEGLossless = 8197;
  JPEGExtendedProcess_2_4 = 8199;
  JPEG_3_5 = 8200;
  JPEG_6_8 = 8201;
  JPEG_7_9 = 8202;
  JPEG_10_12 = 8203;
  JPEG_11_13 = 8204;
  JPEGLossless14 = 8205;
  JPEGLossless15 = 8206;
  JPEG_16_18 = 8207;
  JPEG_17_19 = 8208;
  JPEG_20_22 = 8209;
  JPEG_21_23 = 8210;
  JPEG_24_26 = 8211;
  JPEG_25_27 = 8212;
  JPEG_28 = 8213;
  JPEG_29 = 8214;
  {$IFDEF ECLZLIBTransferSyntax}
  zlibFastestTransferSyntax = 8215;
  ppmFastestTransferSyntax = 8216;
  bzipFastestTransferSyntax = 8217;

  zlibMaxTransferSyntax = 8222;
  ppmMaxTransferSyntax = 8223;
  bzipMaxTransferSyntax = 8224;

  zlibNormalTransferSyntax = 8225;
  ppmNormalTransferSyntax = 8226;
  bzipNormalTransferSyntax = 8227;
  {$ENDIF}
  JPEGLossless80 = 8218;
  JPEGNearLossless81 = 8219;
  JPEG2000Irreversible = 8220; //.90 lossless
  JPEG2000Reversible = 8221; //.91 losy';


CREATE GENERATOR GEN_EVENTSWL_ID;

drop TABLE PACS.EVENTS_WL ;

CREATE TABLE EVENTS_WL (
    FK_ID      INTEGER NOT NULL,
    FC_NAME    VARCHAR(255),
    FN_TYPE    INTEGER,
    FD_DATE    TIMESTAMP,
    FC_REMARK  VARCHAR(10000)
);

ALTER TABLE EVENTS_WL ADD CONSTRAINT PK_EVENTS_WL PRIMARY KEY (FK_ID);

/* Trigger: EVENTS_WL_BI0 */
CREATE OR ALTER TRIGGER EVENTS_WL_BI0 FOR EVENTS_WL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_EVENTSWL_ID, 1);
  end
end;

DESCRIBE TABLE EVENTS_WL
'Таблица событий WL-сервера Created by Prihodko N. 16.05.2012';

DESCRIBE FIELD FK_ID TABLE EVENTS_WL
'UID';

DESCRIBE FIELD FC_NAME TABLE EVENTS_WL
'Событие';

DESCRIBE FIELD FN_TYPE TABLE EVENTS_WL
'Тип события (1-DicomAssociation, 2-DicomFind)';

DESCRIBE FIELD FD_DATE TABLE EVENTS_WL
'Дата события';

DESCRIBE FIELD FC_REMARK TABLE EVENTS_WL
'Комментарии';

CREATE GENERATOR GEN_HOSPITALS_ID;


drop TABLE PACS.HOSPITALS ;

CREATE TABLE HOSPITALS (
    P_ID                INTEGER NOT NULL,
    FC_NAME             VARCHAR(100) NOT NULL,
    FN_TYPE             SMALLINT NOT NULL,
    STUDIES_IMAGE_TYPE  CHAR(4),
    FN_PARENTID         INTEGER NOT NULL
);

/* Trigger: HOSPITALS_BI0 */
CREATE OR ALTER TRIGGER HOSPITALS_BI0 FOR HOSPITALS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.P_ID is null) then
  begin
    new.P_ID = gen_id(GEN_HOSPITALS_ID, 1);
  end
end;

DESCRIBE FIELD P_ID TABLE HOSPITALS
'PK';

DESCRIBE FIELD FC_NAME TABLE HOSPITALS
'Наименование';

DESCRIBE FIELD FN_TYPE TABLE HOSPITALS
'1-страна,
2-регион,
3-район,
4-город,
5-нас.пункт,
6-ЛПУ,
7-отделение,
8-DICOM';

DESCRIBE FIELD STUDIES_IMAGE_TYPE TABLE HOSPITALS
'Модальность - для DICOM устройств';

DESCRIBE FIELD FN_PARENTID TABLE HOSPITALS
'id родителя
';

drop TABLE PACS.IMAGES ;

CREATE TABLE IMAGES (
    STUDYUID             CHAR(80) NOT NULL,
    SERIESUID            CHAR(80) NOT NULL,
    INSTANCEUID          CHAR(80) NOT NULL,
    IMGNO                INTEGER NOT NULL,
    IMAGETYPE            CHAR(4),
    SIZEX                INTEGER,
    SIZEY                INTEGER,
    PHOTOMETRIC          CHAR(24),
    BITS                 INTEGER,
    ABITS                INTEGER,
    BITS_PER_SAMPLE      INTEGER,
    IMAGEDATE            TIMESTAMP,
    STUDIESDATE          TIMESTAMP,
    SELECTEDINDEX        INTEGER,
    SELECTEDINDEX1       INTEGER,
    SELECTEDINDEX2       INTEGER,
    SELECTEDINDEX3       INTEGER,
    IMAGEFLAG            CHAR(80),
    P_PID                CHAR(80),
    LAST_WINDOWS_CENTER  INTEGER,
    LAST_WINDOWS_WIDTH   INTEGER,
    LAST_UPDATE_TIME     TIMESTAMP,
    ACCESSIONNUMBER      CHAR(100),
    IMAGESIZE            INTEGER
);

ALTER TABLE IMAGES ADD PRIMARY KEY (INSTANCEUID);

CREATE INDEX IMAGES_AN ON IMAGES (ACCESSIONNUMBER);
CREATE INDEX IMAGES_IDX1 ON IMAGES (STUDYUID);

DESCRIBE FIELD ACCESSIONNUMBER TABLE IMAGES
'Accession Number (номер протокола)';


drop TABLE PACS.IMAGE_CHANNELS ;

CREATE TABLE IMAGE_CHANNELS (
    DESCRIPTION    CHAR(32) NOT NULL,
    CALLEDAET      CHAR(40),
    HOSTNAME       CHAR(40) NOT NULL,
    DICOMPORT      INTEGER NOT NULL,
    ICPORT         INTEGER,
    TIMEOUTSEC     INTEGER,
    DEFAULTDEVICE  CHAR(2),
    LOADIMAGEMODE  INTEGER
);

ALTER TABLE IMAGE_CHANNELS ADD PRIMARY KEY (DESCRIPTION);


drop TABLE PACS.LAYOUT_TABLE ;

CREATE TABLE LAYOUT_TABLE (
    NAME        CHAR(20) NOT NULL,
    LAYOUTDATA  BLOB SUB_TYPE 0,
    MODALITY    CHAR(2)
);

ALTER TABLE LAYOUT_TABLE ADD PRIMARY KEY (NAME);


drop TABLE PACS.MODILITY_SETTING ;

CREATE TABLE MODILITY_SETTING (
    PROF               CHAR(20) NOT NULL,
    MODALITY           CHAR(8) NOT NULL,
    GROUPNAME          CHAR(20),
    WORDCLASSIFY       CHAR(20),
    DEFAULTPRESET      CHAR(20),
    MWLFILTER          CHAR(200),
    DISPLAYINFO        CHAR(1),
    DISPLAYMODE        CHAR(20),
    INFO_FONT          INTEGER,
    INFO_FONT_WIDTH    CHAR(20),
    IMAGE_AUTOGRID     CHAR(1),
    IMAGE_ROWS         INTEGER,
    IMAGE_COLUMNS      INTEGER,
    SERIES_AUTOGRID    CHAR(1),
    SERIES_ROWS        INTEGER,
    SERIES_COLUMNS     INTEGER,
    CANDICOMPRINT      CHAR(1),
    PRINTDPI           CHAR(10),
    FILMSIZE           CHAR(20),
    PRINT_ROWS         INTEGER,
    PRINT_COLUMNS      INTEGER,
    IMAGEPOSITIONMARK  CHAR(1),
    CANDELETEIMAGE     CHAR(1),
    CAPTURE_SAVE_MODE  CHAR(10),
    CUT_SAVE_MODE      CHAR(10),
    IMAGE_SOURCE       CHAR(16),
    DEFAULTLAYOUT      CHAR(20)
);

ALTER TABLE MODILITY_SETTING ADD PRIMARY KEY (PROF);

CREATE INDEX MODILITY_SETTING_GROUPNAME ON MODILITY_SETTING (GROUPNAME);
CREATE INDEX MODILITY_SETTING_MODALITY ON MODILITY_SETTING (MODALITY);


drop TABLE PACS.PARAMS ;

CREATE TABLE PARAMS (
    FC_SECTION  VARCHAR(100),
    FC_KEY      VARCHAR(100),
    FC_VALUE    VARCHAR(1000)
);

CREATE INDEX PARAMS_KEY ON PARAMS (FC_KEY);
CREATE INDEX PARAMS_SECTION ON PARAMS (FC_SECTION);

DESCRIBE FIELD FC_SECTION TABLE PARAMS
'Имя секции';

DESCRIBE FIELD FC_KEY TABLE PARAMS
'Имя ключа';

DESCRIBE FIELD FC_VALUE TABLE PARAMS
'Значение';

drop TABLE PACS.PATIENTS ;

CREATE TABLE PATIENTS (
    P_ENAME      CHAR(255),
    P_SEX        CHAR(4),
    P_PID        CHAR(20) NOT NULL,
    P_DATEBORN   TIMESTAMP,
    P_FAM        CHAR(255),
    P_IM         CHAR(255),
    P_OTCH       CHAR(255),
    P_ENAME_RUS  CHAR(255)
);

ALTER TABLE PATIENTS ADD PRIMARY KEY (P_PID);

/* Trigger: PATIENTS_BD0 */
CREATE OR ALTER TRIGGER PATIENTS_BD0 FOR PATIENTS
ACTIVE BEFORE DELETE POSITION 0
AS
begin
  delete from studies where p_pid = old.p_pid;
end;

DESCRIBE FIELD P_ENAME TABLE PATIENTS
'ФИО ПАЦИЕНТА';

DESCRIBE FIELD P_SEX TABLE PATIENTS
'ПОЛ ПАЦИЕНТА';

DESCRIBE FIELD P_PID TABLE PATIENTS
'НОМЕР ПАЦИЕНТА=НОМЕР МЕДИЦИНСКОЙ КАРТЫ';

DESCRIBE FIELD P_DATEBORN TABLE PATIENTS
'ДАТА РОЖДЕНИЯ ПАЦИЕНТА';

DESCRIBE FIELD P_FAM TABLE PATIENTS
'ФАМИЛИЯ ПАЦИЕНТА';

DESCRIBE FIELD P_IM TABLE PATIENTS
'ИМЯ ПАЦИЕНТА';

DESCRIBE FIELD P_OTCH TABLE PATIENTS
'ОТЧЕСТВО ПАЦИЕНТА';

drop TABLE PACS.REMOTE_DEVICES ;

CREATE TABLE REMOTE_DEVICES (
    DESCRIPTION    CHAR(32) NOT NULL,
    CALLEDAET      CHAR(40),
    HOSTNAME       CHAR(40) NOT NULL,
    DICOMPORT      INTEGER NOT NULL,
    HOSTTYPE       CHAR(32) NOT NULL,
    DEFAULTDEVICE  CHAR(2),
    LOADIMAGEMODE  INTEGER
);

ALTER TABLE REMOTE_DEVICES ADD PRIMARY KEY (DESCRIPTION);

CREATE GENERATOR GEN_RULES_ID;

drop TABLE PACS.RULES ;

CREATE TABLE RULES (
    FK_ID            INTEGER NOT NULL,
    FK_DEVICEID      INTEGER,
    FK_DEVICEID2     INTEGER,
    FC_MOD           VARCHAR(2),
    FN_COMPRESS      INTEGER,
    FN_PRC_COMPRESS  SMALLINT
);

ALTER TABLE RULES ADD CONSTRAINT PK_RULES PRIMARY KEY (FK_ID);

/* Trigger: RULES_BI0 */
CREATE OR ALTER TRIGGER RULES_BI0 FOR RULES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FK_ID IS NULL) THEN
    NEW.FK_ID = GEN_ID(GEN_RULES_ID,1);
END;

DESCRIBE TABLE RULES
'Таблица правил пересылки';

DESCRIBE FIELD FK_ID TABLE RULES
'UID';

DESCRIBE FIELD FK_DEVICEID TABLE RULES
'DEVICES.FK_ID - куда отправлять снимки';

DESCRIBE FIELD FK_DEVICEID2 TABLE RULES
'DEVICES.FK_ID - откуда пришли снимки';

DESCRIBE FIELD FC_MOD TABLE RULES
'Модальность';

DESCRIBE FIELD FN_COMPRESS TABLE RULES
'transfer syntax для сжатия снимка при отправке
.   .
описано в dcm_uid.pas в dicomVCL
.   .
PrivateTransferSyntax = 8192;
  ImplicitVRLittleEndian = 8193;
  ExplicitVRLittleEndian = 8194;
  ExplicitVRBigEndian = 8195;
  RLELossless = 8198;
  //JPEG_1 = 8196;
  JPEGBaseline = 8196;
  //JPEG_14_SelectionValue1 = 8197;
  JPEGLossless = 8197;
  JPEGExtendedProcess_2_4 = 8199;
  JPEG_3_5 = 8200;
  JPEG_6_8 = 8201;
  JPEG_7_9 = 8202;
  JPEG_10_12 = 8203;
  JPEG_11_13 = 8204;
  JPEGLossless14 = 8205;
  JPEGLossless15 = 8206;
  JPEG_16_18 = 8207;
  JPEG_17_19 = 8208;
  JPEG_20_22 = 8209;
  JPEG_21_23 = 8210;
  JPEG_24_26 = 8211;
  JPEG_25_27 = 8212;
  JPEG_28 = 8213;
  JPEG_29 = 8214;
  {$IFDEF ECLZLIBTransferSyntax}
  zlibFastestTransferSyntax = 8215;
  ppmFastestTransferSyntax = 8216;
  bzipFastestTransferSyntax = 8217;

  zlibMaxTransferSyntax = 8222;
  ppmMaxTransferSyntax = 8223;
  bzipMaxTransferSyntax = 8224;

  zlibNormalTransferSyntax = 8225;
  ppmNormalTransferSyntax = 8226;
  bzipNormalTransferSyntax = 8227;
  {$ENDIF}
  JPEGLossless80 = 8218;
  JPEGNearLossless81 = 8219;
  JPEG2000Irreversible = 8220; //.90 lossless
  JPEG2000Reversible = 8221; //.91 losy';

DESCRIBE FIELD FN_PRC_COMPRESS TABLE RULES
'% сжатия
';


drop TABLE PACS.SERIES ;

CREATE TABLE SERIES (
    STUDYUID            CHAR(80) NOT NULL,
    SERIESUID           CHAR(80) NOT NULL,
    SERIES_IMAGETYPE    CHAR(4),
    SERIES_IMAGE_COUNT  INTEGER,
    SERIES_DESC         CHAR(80),
    ACCESSIONNUMBER     CHAR(100),
    SERIES_DATE         TIMESTAMP
);

ALTER TABLE SERIES ADD PRIMARY KEY (SERIESUID);

CREATE INDEX SERIES_AN ON SERIES (ACCESSIONNUMBER);

DESCRIBE FIELD ACCESSIONNUMBER TABLE SERIES
'AccessionNumber (номер протокола)';


drop TABLE PACS.STUDIES ;

CREATE TABLE STUDIES (
    STUDYUID                     CHAR(80) NOT NULL,
    P_ENAME                      CHAR(50),
    P_SEX                        CHAR(4),
    P_PID                        CHAR(80),
    STUDYID                      CHAR(20),
    PEER_IP                      CHAR(20),
    BSTATE                       INTEGER,
    LDATE                        TIMESTAMP NOT NULL,
    BACKUPTIME                   TIMESTAMP,
    BACKUPVAL                    CHAR(20),
    STUDY_IMAGE_COUNT            INTEGER,
    STUDIES_IMAGE_TYPE           CHAR(4),
    RPHYS                        CHAR(20),
    OPNAME                       CHAR(20),
    PERFORMPHYS                  CHAR(20),
    CALLING_AE_TITLE             CHAR(16),
    STUDYDESCRIPTION             CHAR(80),
    INSTITUTIONALDEPARTMENTNAME  CHAR(80),
    REFERRINGPHYSICIANNAME       CHAR(80),
    REPORTSTATE                  INTEGER,
    PRINTSTATE                   INTEGER,
    P_AGE                        CHAR(4),
    P_DOB                        CHAR(4),
    P_DATEBORN                   TIMESTAMP,
    P_ENAME_RUS                  CHAR(50),
    STATUS                       INTEGER,
    ACCESSIONNUMBER              CHAR(100),
    NAME_DISC                    CHAR(50),
    ACTUALITY                    SMALLINT,
    FC_AEAPPARAT                 VARCHAR(15)
);

ALTER TABLE STUDIES ADD PRIMARY KEY (STUDYUID);

/* Trigger: STUDIES_BD0 */
CREATE OR ALTER TRIGGER STUDIES_BD0 FOR STUDIES
ACTIVE BEFORE DELETE POSITION 0
AS
begin
  DELETE FROM SERIES WHERE STUDYUID = OLD.STUDYUID;
  DELETE FROM IMAGES WHERE STUDYUID = OLD.STUDYUID;
end;

DESCRIBE FIELD LDATE TABLE STUDIES
'StudyDate (Дата исследования)';

DESCRIBE FIELD STATUS TABLE STUDIES
'Study Status
0 - server
1 - archive
2 - localbase';

DESCRIBE FIELD ACCESSIONNUMBER TABLE STUDIES
'Protocol Number (Номер протокола)';

DESCRIBE FIELD NAME_DISC TABLE STUDIES
'Name of Disc';

DESCRIBE FIELD ACTUALITY TABLE STUDIES
'актуальность исследования (для телемедицины)
значения :
0-не установлено
1-плановая
2-срочная
3-экстренная
4-завершенная
';

DESCRIBE FIELD FC_AEAPPARAT TABLE STUDIES
'AEtitle аппарата с которого пришло исследование';


drop TABLE PACS.TAGS ;

CREATE TABLE TAGS (
    FC_TITLE               CHAR(15) NOT NULL,
    FC_IMAGETYPE_1         CHAR(5),
    FC_IMAGETYPE_2         CHAR(5),
    FC_STUDYID_1           CHAR(5),
    FC_STUDYID_2           CHAR(5),
    FC_PATIENTID_1         CHAR(5),
    FC_PATIENTID_2         CHAR(5),
    FC_STUDYDESCRIPTION_1  CHAR(5),
    FC_STUDYDESCRIPTION_2  CHAR(5),
    FC_ACCESSIONNUMBER_1   CHAR(5),
    FC_ACCESSIONNUMBER_2   CHAR(5),
    FC_DA_1                CHAR(5),
    FC_DA_2                CHAR(5),
    FC_DT_1                CHAR(5),
    FC_DT_2                CHAR(5),
    FC_STUDYUID_1          CHAR(5),
    FC_STUDYUID_2          CHAR(5),
    FC_SERIESUID_1         CHAR(5),
    FC_SERIESUID_2         CHAR(5),
    FC_SERNUM_1            CHAR(5),
    FC_SERNUM_2            CHAR(5),
    FC_PHYSNAME_1          CHAR(5),
    FC_PHYSNAME_2          CHAR(5),
    FC_PNAME_1             CHAR(5),
    FC_PNAME_2             CHAR(5),
    FC_PDATEBORN_1         CHAR(5),
    FC_PDATEBORN_2         CHAR(5),
    FC_PSEX_1              CHAR(5),
    FC_PSEX_2              CHAR(5),
    FC_AID_1               CHAR(5),
    FC_AID_2               CHAR(5),
    FC_ACQNUM_1            CHAR(5),
    FC_ACQNUM_2            CHAR(5),
    FC_INSTANCEUID_1       CHAR(5),
    FC_INSTANCEUID_2       CHAR(5),
    FC_KIN_1               CHAR(5),
    FC_KIN_2               CHAR(5)
);

ALTER TABLE TAGS ADD CONSTRAINT PK_TAGS PRIMARY KEY (FC_TITLE);

DESCRIBE FIELD FC_TITLE TABLE TAGS
'AETITLE';

DESCRIBE FIELD FC_IMAGETYPE_1 TABLE TAGS
'Модальность (CS Modality)';

DESCRIBE FIELD FC_STUDYID_1 TABLE TAGS
'ID исследования (StudyID)';

DESCRIBE FIELD FC_PATIENTID_1 TABLE TAGS
'ID пациента (PatientID)';

DESCRIBE FIELD FC_STUDYDESCRIPTION_1 TABLE TAGS
'Комментарий-описание к исследованию (Study Description)';

DESCRIBE FIELD FC_ACCESSIONNUMBER_1 TABLE TAGS
'Номер протокола исследования';

DESCRIBE FIELD FC_DA_1 TABLE TAGS
'Дата исследования (Study Date)';

DESCRIBE FIELD FC_DT_1 TABLE TAGS
'Время исследования (Study Time)';

DESCRIBE FIELD FC_STUDYUID_1 TABLE TAGS
'Study Instance UID';

DESCRIBE FIELD FC_SERIESUID_1 TABLE TAGS
'Series Instanse UID';

DESCRIBE FIELD FC_SERNUM_1 TABLE TAGS
'Series Number';

CREATE GENERATOR GEN_TEMPLATES_ID;

drop TABLE PACS.TEMPLATES ;

CREATE TABLE TEMPLATES (
    FK_ID               INTEGER NOT NULL,
    STUDIES_IMAGE_TYPE  CHAR(4),
    FC_NOTES            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    FC_COMM             VARCHAR(100) NOT NULL,
    FN_IS_DEL           SMALLINT
);

ALTER TABLE TEMPLATES ADD CONSTRAINT PK_TEMPLATES PRIMARY KEY (FK_ID);

/* Trigger: TEMPLATES_BI0 */
CREATE OR ALTER TRIGGER TEMPLATES_BI0 FOR TEMPLATES
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_TEMPLATES_ID, 1);
    new.FN_IS_DEL = 0;
  end
end;

DESCRIBE FIELD FK_ID TABLE TEMPLATES
'PK - первичный ключ';

DESCRIBE FIELD STUDIES_IMAGE_TYPE TABLE TEMPLATES
'Модальность';

DESCRIBE FIELD FC_NOTES TABLE TEMPLATES
'Текст шаблона';

DESCRIBE FIELD FC_COMM TABLE TEMPLATES
'Комментарии';

DESCRIBE FIELD FN_IS_DEL TABLE TEMPLATES
'(=1) - признак удаленной записи
';

CREATE GENERATOR GEN_USERS_ID;


drop TABLE PACS.USERS ;

CREATE TABLE USERS (
    FC_LOGIN            VARCHAR(50) NOT NULL,
    FC_FAM              VARCHAR(100),
    FC_IM               VARCHAR(100),
    FC_OTCH             VARCHAR(100),
    FD_ROJD             TIMESTAMP,
    FC_ADDRESS          VARCHAR(150),
    FC_TEL              VARCHAR(100),
    FN_ADM              INTEGER,
    FN_DEL              INTEGER,
    FK_ID               INTEGER NOT NULL,
    FN_ISWADO           SMALLINT,
    FN_ISQUERIES        SMALLINT,
    FN_ISCONCL          SMALLINT,
    FC_FIRMA            VARCHAR(100),
    FC_DOLJN            VARCHAR(50),
    FC_USLUGI           VARCHAR(250),
    FC_SPECIALIZATIONS  VARCHAR(250),
    FN_CR               SMALLINT,
    FN_DX               SMALLINT,
    FN_IO               SMALLINT,
    FN_MR               SMALLINT,
    FN_OT               SMALLINT,
    FN_SC               SMALLINT,
    FN_XA               SMALLINT,
    FN_CT               SMALLINT,
    FN_ES               SMALLINT,
    FN_MG               SMALLINT,
    FN_NM               SMALLINT,
    FN_PX               SMALLINT,
    FN_RG               SMALLINT,
    FN_US               SMALLINT,
    FN_XC               SMALLINT,
    FN_RF               SMALLINT
);

CREATE INDEX USERS_IDX1 ON USERS (FC_LOGIN, FN_DEL);
CREATE INDEX USERS_IDX2 ON USERS (FK_ID);

/* Trigger: USERS_BI0 */
CREATE OR ALTER TRIGGER USERS_BI0 FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_USERS_ID, 1);
    new.FN_DEL = 0;
  end
end;

DESCRIBE TABLE USERS
'Таблица пользователей';

DESCRIBE FIELD FC_LOGIN TABLE USERS
'Логин пользователя';

DESCRIBE FIELD FC_FAM TABLE USERS
'Фамилия пользователя';

DESCRIBE FIELD FC_IM TABLE USERS
'Имя пользователя';

DESCRIBE FIELD FC_OTCH TABLE USERS
'Отчество пользователя ';

DESCRIBE FIELD FD_ROJD TABLE USERS
'Дата рождения пользователя';

DESCRIBE FIELD FC_ADDRESS TABLE USERS
'Адрес пользователя';

DESCRIBE FIELD FC_TEL TABLE USERS
'Телефон пользователя';

DESCRIBE FIELD FN_ADM TABLE USERS
'Признак является ли админом данный пользователь (0 - нет, 1 - да)';

DESCRIBE FIELD FN_DEL TABLE USERS
'Признак удаления (0 - не удален, 1 - удален)';

DESCRIBE FIELD FK_ID TABLE USERS
'Уникальный идентификатор';

DESCRIBE FIELD FN_ISWADO TABLE USERS
'(=1) признак что пользователь заведен для ЦМИ
';

DESCRIBE FIELD FN_ISQUERIES TABLE USERS
'право формировать очередь исследований на заключение
';

DESCRIBE FIELD FN_ISCONCL TABLE USERS
'право писать заключения (=1)
только смотреть заключения (=2)';

DESCRIBE FIELD FC_FIRMA TABLE USERS
'организация';

DESCRIBE FIELD FC_DOLJN TABLE USERS
'должность
';

DESCRIBE FIELD FC_USLUGI TABLE USERS
'список предоставляемых услуг';

DESCRIBE FIELD FC_SPECIALIZATIONS TABLE USERS
'список специализаций';

DESCRIBE FIELD FN_CR TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_DX TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_IO TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_MR TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_OT TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_SC TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_XA TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_CT TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_ES TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_MG TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_NM TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_PX TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_RG TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_US TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_XC TABLE USERS
'фильтр по этой модальности при просмотре исследований';

DESCRIBE FIELD FN_RF TABLE USERS
'фильтр по этой модальности при просмотре исследований';


drop TABLE PACS.WINDOWS_PRESET ;

CREATE TABLE WINDOWS_PRESET (
    MODALITY       CHAR(2) NOT NULL,
    PARTNAME       CHAR(24) NOT NULL,
    HOTKEY         CHAR(24) NOT NULL,
    WINDOW_WIDTH   INTEGER,
    WINDOWS_LEVEL  INTEGER
);

ALTER TABLE WINDOWS_PRESET ADD PRIMARY KEY (MODALITY, PARTNAME);

CREATE GENERATOR GEN_WORKLIST_ID;


drop TABLE PACS.WORKLIST ;

CREATE TABLE WORKLIST (
    P_ENAME          CHAR(255),
    P_SEX            CHAR(4),
    P_PID            CHAR(20) NOT NULL,
    P_DATEBORN       TIMESTAMP,
    P_FAM            CHAR(255),
    P_IM             CHAR(255),
    P_OTCH           CHAR(255),
    P_ENAME_RUS      CHAR(255),
    P_PATIENTSEX     CHAR(3),
    ACCESSIONNUMBER  CHAR(100),
    MODALITY         CHAR(5),
    P_AETITLE        CHAR(15) NOT NULL,
    STUDYUID         CHAR(80),
    P_ST_DT          TIMESTAMP,
    STATUS           SMALLINT,
    FK_ID            INTEGER NOT NULL
);

ALTER TABLE WORKLIST ADD PRIMARY KEY (FK_ID);

/* Trigger: WORKLIST_BI0 */
CREATE OR ALTER TRIGGER WORKLIST_BI0 FOR WORKLIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.fk_id is null) then
  begin
    new.fk_id = gen_id(GEN_WORKLIST_ID, 1);
  end
end;

