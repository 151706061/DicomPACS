unit PKGTKARTCOMPOS;

// Oracle Package Wizard 1.0.3
// File PKGTKARTCOMPOS.pas generated by Delphi5 on 27.10.2006 9:55:09
// This unit contains interface objects for oracle package MED.PKGTKARTCOMPOS
// WARNING: Modifications made to this file will be lost after regeneration!

interface

uses Classes, SysUtils, Oracle;

type
(*
package PKGTKARTCOMPOS is

  -- Author  : NSV
  -- Created : 25.09.2006 15:47:17
  -- Purpose :


FUNCTION GET_NEXT_NUMBER
--ѕолучить следующий пор€дковый номер дл€ карточки производимого медикамента.
--¬ нашем случае - это кол-во MAX(TKARTCOMPOS.FN_NUMBER) + 1
   RETURN INTEGER;

FUNCTION CREATE_BLANK_TKARTCOMPOS
/*создадим чистую запись в таблице TKARTCOMPOS, в которую будет записаны данные создаваемой карточки изготавливаемого препарата.*/
   RETURN NUMBER;

PROCEDURE EDIT_TKARTCOMPOS(
          pfk_id      IN NUMBER,
          pfk_medicid IN NUMBER,
          pfc_serial  IN VARCHAR2,
          pfd_data    IN DATE,
          pfn_amount  IN NUMBER,
          pfn_number  IN NUMBER
          );
/*–едактируем запись с id   pfk_id в таблице TKARTCOMPOS*/

PROCEDURE DEL_TKARTCOMPOS(pfk_id IN NUMBER);
/*”далить запись с id  pfk_id в таблице TKARTCOMPOS*/

PROCEDURE GET_BY_FK_ID (
             pFK_ID IN NUMBER,
             pfk_medicid OUT NUMBER,
             pfc_TMEDIC_NAME OUT VARCHAR2,
             pfc_serial OUT VARCHAR2,
             pfd_data OUT DATE,
             pfn_amount OUT NUMBER,
             pFC_UEDIZM OUT VARCHAR2,
             PFC_FEDIZM OUT VARCHAR2,
             pfn_number OUT NUMBER);
/*процедура возвращает значени€ всех полей записи таблицы*/

FUNCTION GET_REST_COUNT_OF_ITEM(
    pTKARTCOMPOS_FK_ID IN NUMBER,
    pTMEDICOMPLEX_FK_MEDIC IN NUMBER,
    pTMEDICOMPLEX_FK_MEDICITEM IN NUMBER,
    pTKARTCO_ITEM_KARTID IN NUMBER, --выбранна€ карточка ингридиента
    pFN_Main_Amount IN NUMBER, -- кол-во производимого медикамента, указанное на форме карточки производимого медикамента
    pFN_Item_Amount IN NUMBER -- кол-во ингридиента (pTKARTCO_ITEM_KARTID) дл€ производимого медикамента
) RETURN NUMBER;
/*≈сли мы выбираем карточку дл€ оу ингридиента, который входит в список об€зательных оу (TMEDICOMPLEX) дл€ данного производимого медикамента
 , то pTMEDICOMPLEX_FK_MEDICITEM<>-1, иначе pTMEDICOMPLEX_FK_MEDICITEM==-1

‘-и€ возвращает: кол-во медикаментов, которое надо добрать(добавить
         в состов производимого медикамента) дл€ выбранной карточки производимого медикамента TKARTCOMPOS_FK_ID дл€ выбранного TMEDICOMPLEX_FK_MEDICITEM в odsObazat_Ingridienti
     -987654 - если возникла ошибка*/
PROCEDURE TKARTCOMPOS_PODPISAT(pfk_id IN NUMBER);
/*ѕќƒѕ»Ў≈ћ запись с id   pfk_id в таблице TKARTCOMPOS*/


end PKGTKARTCOMPOS;
*)
  TPKGTKARTCOMPOS = class(TOracleCustomPackage)
  public
    function  CREATEBLANKTKARTCOMPOS: Double;
    procedure DELTKARTCOMPOS(PFKID: Double);
    procedure EDITTKARTCOMPOS(PFKID: Double; PFKMEDICID: Double;
      const PFCSERIAL: string; PFDDATA: TDateTime; PFNAMOUNT: Double; 
      PFNNUMBER: Double; PFD_GODEN_DO: Variant);
    procedure GETBYFKID(PFKID: Double; out PFKMEDICID: Double; 
      out PFCTMEDICNAME: string; out PFCSERIAL: string; 
      out PFDDATA: TDateTime; out PFNAMOUNT: Double; out PFCUEDIZM: string; 
      out PFCFEDIZM: string; out PFNNUMBER: Double);
    function  GETNEXTNUMBER: Double;
    function  GETRESTCOUNTOFITEM(PTKARTCOMPOSFKID: Double; 
      PTMEDICOMPLEXFKMEDIC: Double; PTMEDICOMPLEXFKMEDICITEM: Double; 
      PTKARTCOITEMKARTID: Double; PFNMAINAMOUNT: Double; 
      PFNITEMAMOUNT: Double): Double;
    procedure TKARTCOMPOSPODPISAT(PFKID: Double);
    procedure TKARTCOMPOSOTPISAT(PFKID: Double);    
  published
    property Name;
    property Session;
    property Cursor;
  end;

var
  DefaultPLSQLTableSize: Integer = 100; // Default size of a PL/SQL Table

implementation

// PKGTKARTCOMPOS.CREATE_BLANK_TKARTCOMPOS
function TPKGTKARTCOMPOS.CREATEBLANKTKARTCOMPOS: Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKGTKARTCOMPOS"."CREATE_BLANK_TKARTCOMPOS";');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKGTKARTCOMPOS.DEL_TKARTCOMPOS
procedure TPKGTKARTCOMPOS.DELTKARTCOMPOS(PFKID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKGTKARTCOMPOS"."DEL_TKARTCOMPOS"(PFK_ID => :PFK_ID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKGTKARTCOMPOS.EDIT_TKARTCOMPOS
procedure TPKGTKARTCOMPOS.EDITTKARTCOMPOS(PFKID: Double; PFKMEDICID: Double; 
  const PFCSERIAL: string; PFDDATA: TDateTime; PFNAMOUNT: Double; 
  PFNNUMBER: Double; PFD_GODEN_DO: Variant);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFC_SERIAL', otString);
  OCPQuery.SetVariable('PFC_SERIAL', PFCSERIAL);
  OCPQuery.DeclareVariable('PFD_DATA', otDate);
  OCPQuery.SetVariable('PFD_DATA', PFDDATA);
  OCPQuery.DeclareVariable('PFN_AMOUNT', otFloat);
  OCPQuery.SetVariable('PFN_AMOUNT', PFNAMOUNT);
  OCPQuery.DeclareVariable('PFN_NUMBER', otFloat);
  OCPQuery.SetVariable('PFN_NUMBER', PFNNUMBER);
  OCPQuery.DeclareVariable('PFD_GODEN_DO', otDate);
  OCPQuery.SetVariable('PFD_GODEN_DO', PFD_GODEN_DO);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKGTKARTCOMPOS"."EDIT_TKARTCOMPOS"(');
  OCPQuery.SQL.Add('    PFK_ID => :PFK_ID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFC_SERIAL => :PFC_SERIAL,');
  OCPQuery.SQL.Add('    PFD_DATA => :PFD_DATA,');
  OCPQuery.SQL.Add('    PFN_AMOUNT => :PFN_AMOUNT,');
  OCPQuery.SQL.Add('    PFN_NUMBER => :PFN_NUMBER,');
  OCPQuery.SQL.Add('    PFD_GODEN_DO => :PFD_GODEN_DO);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKGTKARTCOMPOS.GET_BY_FK_ID
procedure TPKGTKARTCOMPOS.GETBYFKID(PFKID: Double; out PFKMEDICID: Double; 
  out PFCTMEDICNAME: string; out PFCSERIAL: string; 
  out PFDDATA: TDateTime; out PFNAMOUNT: Double; out PFCUEDIZM: string; 
  out PFCFEDIZM: string; out PFNNUMBER: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.DeclareVariable('PFC_TMEDIC_NAME', otString);
  OCPQuery.DeclareVariable('PFC_SERIAL', otString);
  OCPQuery.DeclareVariable('PFD_DATA', otDate);
  OCPQuery.DeclareVariable('PFN_AMOUNT', otFloat);
  OCPQuery.DeclareVariable('PFC_UEDIZM', otString);
  OCPQuery.DeclareVariable('PFC_FEDIZM', otString);
  OCPQuery.DeclareVariable('PFN_NUMBER', otFloat);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKGTKARTCOMPOS"."GET_BY_FK_ID"(');
  OCPQuery.SQL.Add('    PFK_ID => :PFK_ID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFC_TMEDIC_NAME => :PFC_TMEDIC_NAME,');
  OCPQuery.SQL.Add('    PFC_SERIAL => :PFC_SERIAL,');
  OCPQuery.SQL.Add('    PFD_DATA => :PFD_DATA,');
  OCPQuery.SQL.Add('    PFN_AMOUNT => :PFN_AMOUNT,');
  OCPQuery.SQL.Add('    PFC_UEDIZM => :PFC_UEDIZM,');
  OCPQuery.SQL.Add('    PFC_FEDIZM => :PFC_FEDIZM,');
  OCPQuery.SQL.Add('    PFN_NUMBER => :PFN_NUMBER);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  PFKMEDICID := ConvertVariant(OCPQuery.GetVariable('PFK_MEDICID'));
  PFCTMEDICNAME := ConvertVariant(OCPQuery.GetVariable('PFC_TMEDIC_NAME'));
  PFCSERIAL := ConvertVariant(OCPQuery.GetVariable('PFC_SERIAL'));
  PFDDATA := ConvertVariant(OCPQuery.GetVariable('PFD_DATA'));
  PFNAMOUNT := ConvertVariant(OCPQuery.GetVariable('PFN_AMOUNT'));
  PFCUEDIZM := ConvertVariant(OCPQuery.GetVariable('PFC_UEDIZM'));
  PFCFEDIZM := ConvertVariant(OCPQuery.GetVariable('PFC_FEDIZM'));
  PFNNUMBER := ConvertVariant(OCPQuery.GetVariable('PFN_NUMBER'));
end;

// PKGTKARTCOMPOS.GET_NEXT_NUMBER
function TPKGTKARTCOMPOS.GETNEXTNUMBER: Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKGTKARTCOMPOS"."GET_NEXT_NUMBER";');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKGTKARTCOMPOS.GET_REST_COUNT_OF_ITEM
function TPKGTKARTCOMPOS.GETRESTCOUNTOFITEM(PTKARTCOMPOSFKID: Double; 
  PTMEDICOMPLEXFKMEDIC: Double; PTMEDICOMPLEXFKMEDICITEM: Double; 
  PTKARTCOITEMKARTID: Double; PFNMAINAMOUNT: Double; 
  PFNITEMAMOUNT: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PTKARTCOMPOS_FK_ID', otFloat);
  OCPQuery.SetVariable('PTKARTCOMPOS_FK_ID', PTKARTCOMPOSFKID);
  OCPQuery.DeclareVariable('PTMEDICOMPLEX_FK_MEDIC', otFloat);
  OCPQuery.SetVariable('PTMEDICOMPLEX_FK_MEDIC', PTMEDICOMPLEXFKMEDIC);
  OCPQuery.DeclareVariable('PTMEDICOMPLEX_FK_MEDICITEM', otFloat);
  OCPQuery.SetVariable('PTMEDICOMPLEX_FK_MEDICITEM', PTMEDICOMPLEXFKMEDICITEM);
  OCPQuery.DeclareVariable('PTKARTCO_ITEM_KARTID', otFloat);
  OCPQuery.SetVariable('PTKARTCO_ITEM_KARTID', PTKARTCOITEMKARTID);
  OCPQuery.DeclareVariable('PFN_MAIN_AMOUNT', otFloat);
  OCPQuery.SetVariable('PFN_MAIN_AMOUNT', PFNMAINAMOUNT);
  OCPQuery.DeclareVariable('PFN_ITEM_AMOUNT', otFloat);
  OCPQuery.SetVariable('PFN_ITEM_AMOUNT', PFNITEMAMOUNT);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKGTKARTCOMPOS"."GET_REST_COUNT_OF_ITEM"(');
  OCPQuery.SQL.Add('    PTKARTCOMPOS_FK_ID => :PTKARTCOMPOS_FK_ID,');
  OCPQuery.SQL.Add('    PTMEDICOMPLEX_FK_MEDIC => :PTMEDICOMPLEX_FK_MEDIC,');
  OCPQuery.SQL.Add('    PTMEDICOMPLEX_FK_MEDICITEM => :PTMEDICOMPLEX_FK_MEDICITEM,');
  OCPQuery.SQL.Add('    PTKARTCO_ITEM_KARTID => :PTKARTCO_ITEM_KARTID,');
  OCPQuery.SQL.Add('    PFN_MAIN_AMOUNT => :PFN_MAIN_AMOUNT,');
  OCPQuery.SQL.Add('    PFN_ITEM_AMOUNT => :PFN_ITEM_AMOUNT);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKGTKARTCOMPOS.TKARTCOMPOS_PODPISAT
procedure TPKGTKARTCOMPOS.TKARTCOMPOSOTPISAT(PFKID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKGTKARTCOMPOS"."TKARTCOMPOS_OTPISAT"(PFK_ID => :PFK_ID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

procedure TPKGTKARTCOMPOS.TKARTCOMPOSPODPISAT(PFKID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKGTKARTCOMPOS"."TKARTCOMPOS_PODPISAT"(PFK_ID => :PFK_ID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

end.
