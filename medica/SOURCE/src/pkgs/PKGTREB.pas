unit PKGTREB;

// Oracle Package Wizard 1.0.3
// File PKGTREB.pas generated by Delphi5 on 29.12.2006 13:24:47
// This unit contains interface objects for oracle package MED.PKG_TREB
// WARNING: Modifications made to this file will be lost after regeneration!

interface

uses Classes, SysUtils, Oracle;

type
(*
package pkg_treb is

  -- Author  : Sill
  -- Created : 21.02.2006 17:19:11
  -- Purpose : Requirements Routine

  -- Public type declarations

  -- Public function and procedure declarations

  FUNCTION CREATESHABLON(pMoid IN NUMBER) RETURN NUMBER;

  FUNCTION CHECKINMEDIC(PFK_MEDICID IN NUMBER,
                        PFK_TREBID IN NUMBER) RETURN NUMBER;

  FUNCTION CHECKINMEDIC_TTREB_DPC_BYNAZ(PFK_MEDICID IN NUMBER,
                                         PFK_TREBID IN NUMBER) RETURN NUMBER;

  PROCEDURE DO_SET_TREB(pFk_Id IN NUMBER,
                        pNumDoc IN VARCHAR2 default NULL,
                        pDate IN DATE,
                        pMoFrom IN NUMBER,
                        pMoTo IN NUMBER,
                        pComment in VARCHAR2);

  FUNCTION DO_SET_TREB_DPC(pFK_Treb_Dpc IN NUMBER,
                           pFk_TrebId   IN NUMBER,
                           pFk_Medicid  IN NUMBER,
                           pFn_Kol      IN NUMBER) RETURN NUMBER;

  PROCEDURE DO_SET_TTREB_DPC_BYNAZ(pfk_trebid IN NUMBER,
                           pfk_medicid   IN NUMBER,
                           pfn_trebkol   IN NUMBER,
                           pfn_naznkol_u IN NUMBER);

  PROCEDURE ADD_TTREB_DPC_BYNAZ(pfk_trebid IN NUMBER,
                           pfk_medicid   IN NUMBER,
                           pfn_trebkol   IN NUMBER,
                           pfn_naznkol_u  IN NUMBER);

  PROCEDURE DO_DEL_TREB_DPC (pFK_Treb_Dpc IN NUMBER);

  PROCEDURE do_del_treb_dpc_TR_MED (pfk_trebid IN NUMBER,pfk_medicid IN NUMBER);

  PROCEDURE DO_DEL_TTREB_DPC_BYNAZ(pFK_ID IN NUMBER);

  PROCEDURE FORMBYNAZN (pFk_TrebId IN NUMBER,
                        pMoid      IN NUMBER);

  PROCEDURE FORMBYNAZN_TTREB_DPC_BYNAZ (pFk_TrebId IN NUMBER,
                        pMoid  IN NUMBER);

  PROCEDURE MOVE_TTREBDPCBYNAZ_TO_TTREBDPC (pFk_TrebId IN NUMBER,
                                            pMoid IN NUMBER);

  PROCEDURE FILL_MINZAPAS(pFk_trebId IN NUMBER,pMoId IN NUMBER);

end pkg_treb;
*)
  TPKGTREB = class(TOracleCustomPackage)
  public
    function ADDTTREBDPCBYNAZ(PFKTREBID: Double; PFKMEDICID: Double;
      PFNTREBKOL: Double; PFK_NAZN_MEDIC_NAME : Double; PFNNAZNKOLU : Double; PFK_NAZN_EI : Double) : Double;
    function  CHECKINMEDIC(PFKMEDICID: Double; PFKTREBID: Double): Double;
    function  CHECKINMEDICTTREBDPCBYNAZ(PFKMEDICID: Double; 
      PFKTREBID: Double): Double;
    function  CREATESHABLON(PMOID: Double): Double;
    procedure DODELTREBDPC(PFKTREBDPC: Double);
    procedure DODELTREBDPCTRMED(PFKTREBID: Double; PFKMEDICID: Double);
    procedure DODELTTREBDPCBYNAZ(PFKID: Double);
    procedure DOSETTREB(PFKID: Double; const PNUMDOC: string;
      PDATE: TDateTime; PMOFROM: Double; PMOTO: Double;
      const PCOMMENT: string; PMOGROUPID_FROM, PMOGROUPID_TO : Integer; PCITO :  INTEGER = 0);
    function  DOSETTREBDPC(PFKTREBDPC: Double; PFKTREBID: Double;
      PFKMEDICID: Double; PFNKOL: Double): Double;
    function  DOSETTREBDPC_BY_NAZMEDLECH(PFKTREBDPC: Double; PFKTREBID: Double;
      PFKMEDICID: Double; PFNKOL: Double; PFK_NML_ID:Double): Double;
    function DOSETTTREBDPCBYNAZ(PFKTREBID: Double; PFKMEDICID: Double;
      PFNTREBKOL: Double; PFK_NAZN_MEDIC_NAME : Double; PFNNAZNKOLU: Double; PFK_NAZN_EI : Double) : Double;
    procedure FILLMINZAPAS(PFKTREBID: Double; PMOGROUPID: Double);
    procedure FORMBYNAZN(PFKTREBID: Double; PMOID: Double);
    procedure FORMBYNAZNTTREBDPCBYNAZ(PFKTREBID: Double; PMOID: Double);
    procedure MOVETTREBDPCBYNAZTOTTREBDPC(PFKTREBID: Double; PMOID: Double);
    procedure GET_TREB_DPC_LIST_TREBID(PFKTREBID: Double; out pTrebDPCList : TOracleObject );
  published
    property Name;
    property Session;
    property Cursor;
  end;

var
  DefaultPLSQLTableSize: Integer = 100; // Default size of a PL/SQL Table

implementation

// PKG_TREB.ADD_TTREB_DPC_BYNAZ
function TPKGTREB.ADDTTREBDPCBYNAZ(PFKTREBID: Double; PFKMEDICID: Double;
  PFNTREBKOL: Double; PFK_NAZN_MEDIC_NAME : Double; PFNNAZNKOLU: Double; PFK_NAZN_EI : Double) : Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFN_TREBKOL', otFloat);
  OCPQuery.SetVariable('PFN_TREBKOL', PFNTREBKOL);
  OCPQuery.DeclareVariable('PFN_NAZNKOL_U', otFloat);
  OCPQuery.SetVariable('PFN_NAZNKOL_U', PFNNAZNKOLU);
  OCPQuery.DeclareVariable('PFK_NAZN_EI', otFloat);
  OCPQuery.SetVariable('PFK_NAZN_EI', PFK_NAZN_EI);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."ADD_TTREB_DPC_BYNAZ"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFN_TREBKOL => :PFN_TREBKOL,');
  OCPQuery.SQL.Add('    PFK_NAZN_MEDIC_NAME => :PFK_NAZN_MEDIC_NAME,');
  OCPQuery.SQL.Add('    PFN_NAZNKOL_U => :PFN_NAZNKOL_U,');
  OCPQuery.SQL.Add('    PFK_NAZN_EI => :PFK_NAZN_EI);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));  
end;

// PKG_TREB.CHECKINMEDIC
function TPKGTREB.CHECKINMEDIC(PFKMEDICID: Double; PFKTREBID: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."CHECKINMEDIC"(');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKG_TREB.CHECKINMEDIC_TTREB_DPC_BYNAZ
function TPKGTREB.CHECKINMEDICTTREBDPCBYNAZ(PFKMEDICID: Double; 
  PFKTREBID: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."CHECKINMEDIC_TTREB_DPC_BYNAZ"(');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKG_TREB.CREATESHABLON
function TPKGTREB.CREATESHABLON(PMOID: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PMOID', otFloat);
  OCPQuery.SetVariable('PMOID', PMOID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."CREATESHABLON"(PMOID => :PMOID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKG_TREB.DO_DEL_TREB_DPC
procedure TPKGTREB.DODELTREBDPC(PFKTREBDPC: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREB_DPC', otFloat);
  OCPQuery.SetVariable('PFK_TREB_DPC', PFKTREBDPC);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."DO_DEL_TREB_DPC"(PFK_TREB_DPC => :PFK_TREB_DPC);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.DO_DEL_TREB_DPC_TR_MED
procedure TPKGTREB.DODELTREBDPCTRMED(PFKTREBID: Double; PFKMEDICID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."DO_DEL_TREB_DPC_TR_MED"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.DO_DEL_TTREB_DPC_BYNAZ
procedure TPKGTREB.DODELTTREBDPCBYNAZ(PFKID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."DO_DEL_TTREB_DPC_BYNAZ"(PFK_ID => :PFK_ID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.DO_SET_TREB
procedure TPKGTREB.DOSETTREB(PFKID: Double; const PNUMDOC: string; 
  PDATE: TDateTime; PMOFROM: Double; PMOTO: Double; 
  const PCOMMENT: string; PMOGROUPID_FROM, PMOGROUPID_TO : Integer; PCITO :  INTEGER = 0);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_ID', otFloat);
  OCPQuery.SetVariable('PFK_ID', PFKID);
  OCPQuery.DeclareVariable('PNUMDOC', otString);
  OCPQuery.SetVariable('PNUMDOC', PNUMDOC);
  OCPQuery.DeclareVariable('PDATE', otDate);
  OCPQuery.SetVariable('PDATE', PDATE);
  OCPQuery.DeclareVariable('PMOFROM', otFloat);
  OCPQuery.SetVariable('PMOFROM', PMOFROM);
  OCPQuery.DeclareVariable('PMOTO', otFloat);
  OCPQuery.SetVariable('PMOTO', PMOTO);
  OCPQuery.DeclareVariable('PCOMMENT', otString);
  OCPQuery.SetVariable('PCOMMENT', PCOMMENT);
  OCPQuery.DeclareVariable('PMOGROUPID_FROM', otInteger);
  OCPQuery.SetVariable('PMOGROUPID_FROM', PMOGROUPID_FROM);
  OCPQuery.DeclareVariable('PMOGROUPID_TO', otInteger);
  OCPQuery.SetVariable('PMOGROUPID_TO', PMOGROUPID_TO);
  OCPQuery.DeclareVariable('PCITO', otInteger);
  OCPQuery.SetVariable('PCITO', PCITO);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."DO_SET_TREB"(');
  OCPQuery.SQL.Add('    PFK_ID => :PFK_ID,');
  OCPQuery.SQL.Add('    PNUMDOC => :PNUMDOC,');
  OCPQuery.SQL.Add('    PDATE => :PDATE,');
  OCPQuery.SQL.Add('    PMOFROM => :PMOFROM,');
  OCPQuery.SQL.Add('    PMOTO => :PMOTO,');
  OCPQuery.SQL.Add('    PCOMMENT => :PCOMMENT,');
  OCPQuery.SQL.Add('    PMOGROUPID_FROM => :PMOGROUPID_FROM,');
  OCPQuery.SQL.Add('    PMOGROUPID_TO => :PMOGROUPID_TO,');
  OCPQuery.SQL.Add('    PCITO => :PCITO);');  
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.DO_SET_TREB_DPC
function TPKGTREB.DOSETTREBDPC(PFKTREBDPC: Double; PFKTREBID: Double; 
  PFKMEDICID: Double; PFNKOL: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PFK_TREB_DPC', otFloat);
  OCPQuery.SetVariable('PFK_TREB_DPC', PFKTREBDPC);
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFN_KOL', otFloat);
  OCPQuery.SetVariable('PFN_KOL', PFNKOL);

  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."DO_SET_TREB_DPC"(');
  OCPQuery.SQL.Add('    PFK_TREB_DPC => :PFK_TREB_DPC,');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFN_KOL => :PFN_KOL);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKG_TREB.DO_SET_TTREB_DPC_BYNAZ
function TPKGTREB.DOSETTREBDPC_BY_NAZMEDLECH(PFKTREBDPC, PFKTREBID,
  PFKMEDICID, PFNKOL, PFK_NML_ID: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareAndSet('PFK_TREB_DPC', otFloat, PFKTREBDPC );
  OCPQuery.DeclareAndSet('PFK_TREBID',   otFloat, PFKTREBID  );
  OCPQuery.DeclareAndSet('PFK_MEDICID',  otFloat, PFKMEDICID );
  OCPQuery.DeclareAndSet('PFN_KOL',      otFloat, PFNKOL     );
  OCPQuery.DeclareAndSet('PFK_NML_ID',   otFloat, PFK_NML_ID     );

  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."DO_SET_TREB_DPC_BY_NAZMEDLECH"(');
  OCPQuery.SQL.Add('    PFK_TREB_DPC => :PFK_TREB_DPC,');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFN_KOL => :PFN_KOL,');
  OCPQuery.SQL.Add('    PFK_NML_ID => :PFK_NML_ID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

function TPKGTREB.DOSETTTREBDPCBYNAZ(PFKTREBID: Double; PFKMEDICID: Double;
  PFNTREBKOL: Double; PFK_NAZN_MEDIC_NAME : Double;  PFNNAZNKOLU: Double; PFK_NAZN_EI : Double) : Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PFK_MEDICID', otFloat);
  OCPQuery.SetVariable('PFK_MEDICID', PFKMEDICID);
  OCPQuery.DeclareVariable('PFN_TREBKOL', otFloat);
  OCPQuery.SetVariable('PFN_TREBKOL', PFNTREBKOL);
  OCPQuery.DeclareVariable('PFK_NAZN_MEDIC_NAME', otFloat);
  OCPQuery.SetVariable('PFK_NAZN_MEDIC_NAME', PFK_NAZN_MEDIC_NAME);
  OCPQuery.DeclareVariable('PFN_NAZNKOL_U', otFloat);
  OCPQuery.SetVariable('PFN_NAZNKOL_U', PFNNAZNKOLU);
  OCPQuery.DeclareVariable('PFK_NAZN_EI', otFloat);
  OCPQuery.SetVariable('PFK_NAZN_EI', PFK_NAZN_EI);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "MED"."PKG_TREB"."DO_SET_TTREB_DPC_BYNAZ"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PFK_MEDICID => :PFK_MEDICID,');
  OCPQuery.SQL.Add('    PFN_TREBKOL => :PFN_TREBKOL,');
  OCPQuery.SQL.Add('    PFK_NAZN_MEDIC_NAME => :PFK_NAZN_MEDIC_NAME,');
  OCPQuery.SQL.Add('    PFN_NAZNKOL_U => :PFN_NAZNKOL_U,');
  OCPQuery.SQL.Add('    PFK_NAZN_EI => :PFK_NAZN_EI);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// PKG_TREB.FILL_MINZAPAS
procedure TPKGTREB.FILLMINZAPAS(PFKTREBID: Double; PMOGROUPID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PMOGROUPID', otFloat);
  OCPQuery.SetVariable('PMOGROUPID', PMOGROUPID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."FILL_MINZAPAS"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PMOGROUPID => :PMOGROUPID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.FORMBYNAZN
procedure TPKGTREB.FORMBYNAZN(PFKTREBID: Double; PMOID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PMOID', otFloat);
  OCPQuery.SetVariable('PMOID', PMOID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."FORMBYNAZN"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PMOID => :PMOID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.FORMBYNAZN_TTREB_DPC_BYNAZ
procedure TPKGTREB.FORMBYNAZNTTREBDPCBYNAZ(PFKTREBID: Double; PMOID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PMOID', otFloat);
  OCPQuery.SetVariable('PMOID', PMOID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."FORMBYNAZN_TTREB_DPC_BYNAZ"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PMOID => :PMOID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

// PKG_TREB.MOVE_TTREBDPCBYNAZ_TO_TTREBDPC
procedure TPKGTREB.MOVETTREBDPCBYNAZTOTTREBDPC(PFKTREBID: Double; PMOID: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('PFK_TREBID', otFloat);
  OCPQuery.SetVariable('PFK_TREBID', PFKTREBID);
  OCPQuery.DeclareVariable('PMOID', otFloat);
  OCPQuery.SetVariable('PMOID', PMOID);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "MED"."PKG_TREB"."MOVE_TTREBDPCBYNAZ_TO_TTREBDPC"(');
  OCPQuery.SQL.Add('    PFK_TREBID => :PFK_TREBID,');
  OCPQuery.SQL.Add('    PMOID => :PMOID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
end;

procedure TPKGTREB.GET_TREB_DPC_LIST_TREBID(PFKTREBID: Double; out pTrebDPCList : TOracleObject );
begin
  try
    GetQuery;

    pTrebDPCList := TOracleObject.Create( OCPQuery.Session, 'MED.O_TREB_DPC_TABLE', '' )  ;

    with OCPQuery do
    begin
      DeclareAndSet( 'PFK_TREBID', otFloat, PFKTREBID );
      DeclareVariable( 'function_result', otObject );      
      SetComplexVariable( 'function_result', pTrebDPCList );

      SQL.Add('begin');
      SQL.Add('  :function_result := "MED"."PKG_TREB"."GET_TREB_DPC_LIST_TREBID"(');
      SQL.Add('    PFK_TREBID => :PFK_TREBID);');
      SQL.Add('end;');
      Execute;

      pTrebDPCList := TOracleObject( GetComplexVariable ('function_result') );
    end;
  except
    pTrebDPCList := nil;
  end;

end;

end.
